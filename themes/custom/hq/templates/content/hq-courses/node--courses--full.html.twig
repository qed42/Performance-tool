{#
/**
* @file
* Theme override to display a node.
*
* Available variables:
* - node: The node entity with limited access to object properties and methods.
* Only method names starting with "get", "has", or "is" and a few common
* methods such as "id", "label", and "bundle" are available. For example:
* - node.getCreatedTime() will return the node creation timestamp.
* - node.hasField('field_example') returns TRUE if the node bundle includes
* field_example. (This does not indicate the presence of a value in this
* field.)
* - node.isPublished() will return whether the node is published or not.
* Calling other methods, such as node.delete(), will result in an exception.
* See \Drupal\node\Entity\Node for a full list of public properties and
* methods for the node object.
* - label: The title of the node.
* - content: All node items. Use {{ content }} to print them all,
* or print a subset such as {{ content.field_example }}. Use
* {{ content|without('field_example') }} to temporarily suppress the printing
* of a given child element.
* - author_picture: The node author user entity, rendered using the "compact"
* view mode.
* - metadata: Metadata for this node.
* - date: Themed creation date field.
* - author_name: Themed author name field.
* - url: Direct URL of the current node.
* - display_submitted: Whether submission information should be displayed.
* - attributes: HTML attributes for the containing element.
* The attributes.class element may contain one or more of the following
* classes:
* - node: The current template type (also known as a "theming hook").
* - node--type-[type]: The current node type. For example, if the node is an
* "Article" it would result in "node--type-article". Note that the machine
* name will often be in a short form of the human readable label.
* - node--view-mode-[view_mode]: The View Mode of the node; for example, a
* teaser would result in: "node--view-mode-teaser", and
* full: "node--view-mode-full".
* The following are controlled through the node publishing options.
* - node--promoted: Appears on nodes promoted to the front page.
* - node--sticky: Appears on nodes ordered above other non-sticky nodes in
* teaser listings.
* - node--unpublished: Appears on unpublished nodes visible only to site
* admins.
* - title_attributes: Same as attributes, except applied to the main title
* tag that appears in the template.
* - content_attributes: Same as attributes, except applied to the main
* content tag that appears in the template.
* - author_attributes: Same as attributes, except applied to the author of
* the node tag that appears in the template.
* - title_prefix: Additional output populated by modules, intended to be
* displayed in front of the main title tag that appears in the template.
* - title_suffix: Additional output populated by modules, intended to be
* displayed after the main title tag that appears in the template.
* - view_mode: View mode; for example, "teaser" or "full".
* - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
* - page: Flag for the full page state. Will be true if view_mode is 'full'.
* - readmore: Flag for more state. Will be true if the teaser content of the
* node cannot hold the main body content.
* - logged_in: Flag for authenticated user status. Will be true when the
* current user is a logged-in member.
* - is_admin: Flag for admin user status. Will be true when the current user
* is an administrator.
*
* @see template_preprocess_node()
*
* @todo Remove the id attribute (or make it a class), because if that gets
* rendered twice on a page this is invalid CSS for example: two lists
* in different view modes.
*/
#}
{%
set classes = [
'node',
'node--type-' ~ node.bundle|clean_class,
view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
]
%}
{% if is_rtl %}
  {{ attach_library('hq/node.full.ct-courses-rtl') }}
{% else %}
  {{ attach_library('hq/node.full.ct-courses') }}
{% endif %}
<article {{ attributes.addClass(classes) }}>
  {% block node %}
  <div {{ content_attributes }}>
    <div class="courses-hero__block-wrapper">
      <div class="container">
        <div class="row">
          {# HERO block start #}
          <div class="col-12 col-md-7 bg-blue">
            <div class="courses-hero__block">
              <div class="courses-hero__tag">
                {{content.field_course_category.0}}
              </div>
              <h1 class="courses-hero__title">
                {{ label }}
              </h1>
              <div class="courses-hero__btn-group">
                {{content.field_enrollment_link.0}}
                {{ drupal_block("unw_knowledge_hq_social_share") }}
              </div>
            </div>
          </div>
          {# Hero BLOck end #}
          {# Details block start #}
          {% macro iconTextDetails(iconClass, label, fieldValue) %}
            <div class="courses-details__location courses-details__col">
              <i class="drupal-icon {{iconClass}}" tabindex="-1" focusable="false"></i>
              <div class="courses-details__col-l-g">
                <div class="courses-details__col-l">
                  <span>{{label|t}}</span>
                </div>
                <div class="courses-details__col-r">
                  {{fieldValue}}
                </div>
              </div>
            </div>
          {% endmacro %}
          {% set courseType = (category_value in [ "Online moderated", "Online self paced" ]) ? content.field_course_category.0 : content.field_event_address %}
          {% set languageString = '' %}
          {% for item in content.field_language['#items'] %}
            {% if loop.length - loop.index0 == 1 and loop.length > 1 %}
              {% set languageString = languageString ~ 'and '|t ~ content.field_language[loop.index0]|render %}
            {% elseif loop.length > 1 %}
              {% set languageString = languageString ~ content.field_language[loop.index0]|render ~ ', ' %}
            {% else %}
              {% set languageString = languageString ~  content.field_language[loop.index0]|render %}
            {% endif %}
          {% endfor %}
          {% set currenciesText = content.field_currencies.0|render  %}
          {% set courseFee = (content.field_free_course.0|render|trim == 'On') ? 'Free'|t : currenciesText ~ ' ' ~ content.field_fees.0|render  %}
          {% set dateStatus = (content.field_available_all_years.0|render|trim == 'On') ? 'Available online all year'|t : content.field_expiry_date|render  %}

          <div class="col-12 col-md-5">
            <div class="courses-details__wrapper">
              <div class="courses-details__block">
                <div class="courses-details__img">
                  {% if content.field_media_image.0 %}
                    {{ content.field_media_image }}
                  {% else %}
                  <div class="courses-details__img-default">
                    <i class="drupal-icon course-icon" tabindex="-1" focusable="false"></i>
                  </div>
                  {% endif %}
                </div>
                <div class="courses-details__content">
                  {{ _self.iconTextDetails('global-icon', 'Location', courseType) }}
                  {{ _self.iconTextDetails('date-icon', 'Date', dateStatus) }}
                  {{ _self.iconTextDetails('language-icon', 'Language', languageString) }}
                  {{ _self.iconTextDetails('dollar-icon', 'Fee', courseFee) }}
                  {{ _self.iconTextDetails('time-icon', 'Duration', content.field_duration) }}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    {# Hero BLOck end #}
    <div class="container">
      <div class="row">
        <div class="col-12 col-md-7">
          {{ content.field_tab_component }}
        </div>
      </div>
      <div class="row">
        <div class="col-12">
          {% if content.video_tags|length > 1 %}
          <div class="video__block">
            <div class="block related-topics">
              <h2>{{ "Topics"|t}}</h2>
              <ul>
                {% for item in content.video_tags %}
                {% if item|length %}
                <li>{{ item }}</li>
                {% endif %}
                {% endfor %}
              </ul>
            </div>
          </div>
          {% endif %}
        </div>
      </div>
      <div class="row">
        {{ content.field_builder }}
      </div>
    </div>
  </div>
  {% endblock %}
</article>
