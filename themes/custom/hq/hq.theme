<?php

/**
 * @file
 * Theme and preprocess functions for blocks.
 */

use Drupal\node\Entity\Node;
use Drupal\Core\Language\LanguageInterface;
use Drupal\file\Entity\File;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\media\Entity\Media;
use Drupal\Component\Utility\Xss;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Template\Attribute;
use Drupal\taxonomy\TermInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\file\FileInterface;
use Drupal\media\MediaInterface;

/**
 * Implements hook_block_alter().
 */
function hq_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  static $kp_facet_block_ids_map = NULL;
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__' . $variables['elements']['content']['#block_content']->bundle());
  }

  // This is required to make facet functionality work as designed.
  // Overrided hq block template causes issue as it removes everything
  // from DOM.
  if ($kp_facet_block_ids_map === NULL) {
    $kp_facet_block_ids_map = array_flip([
      'resourcelistingcountryfilter',
      'resourcelistingregionfilter',
      'resourcelistingtopicsfilter',
      'resourcelistingfiltersummary',
      'resourcesbytyperegion',
      'resourcesbytypecountry',
      'resourcesbytypetopic',
      'resourcesbytypesummary',
      'kpsearchtopics',
      'kpsearchregion',
      'kpsearchcountry',
      'kpsearchsummary',
      'resourcesbysubjectareatopics',
      'resourcesbysubjectarearegions',
      'resourcesbysubjectareacountries',
      'resourcesbysubjectareasummary',
      'articlesbycountrytype',
      'articlesbycountrytopic',
      'articlesbycountryregion',
      'articlesbycountrycountry',
      'hqarticlesbycountrysummary',
      'thematicarearesourcesbycountry',
      'thematicarearesourcesbycountryregion',
      'thematicarearesourcesbycountrycountry',
      'thematicarearesourcesbycountrysummary',
      'thematicarearesourcesbytopictopic',
      'thematicarearesourcesbytopicregion',
      'thematicarearesourcesbytopiccountry',
      'thematicarearesourcesbytopicsummary',
      'articletypearticlelisting',
      'topic_6',
      'regions_5',
      'country_8',
      'articlelistingfiltersummary',
      'articlebytypearticletype',
      'articlebytypetopic',
      'articlebytyperegion',
      'articlebytypecountry',
      'articlebytypesummary',
      'articletype',
      'countryarticle',
      'regionarticle',
      'resourcesbytypemultimediatype',
      'resourcelistingtypetype',
      'resourcesbytypeeventtype',
      'resourcesbytypecoursecategory',
      'thematicarearesourcesbycountrytype',
      'thematicarearesourcesbytopictype',
      'topicarticle',
      'kpsearchtype',
      'topicsnews',
      'storytypenews',
      'regionsnews',
      'countrynews',
      'countryhq_2',
      'regionhq_2',
      'topicshq',
      'typeofarticlehq',
      'publicationhqsummary',
      'hq_eventsforcoroshomepagecountry',
      'hq_eventsforcoroshomepageeventtype',
      'hq_eventsforcoroshomepageregion',
      'hq_eventsforcoroshomepagetopic',
      'hq_multimediaforcoroshomepagetype',
      'hq_multimediaforcoroshomepagetopic',
      'hq_multimediaforcoroshomepageregion',
      'hq_multimediaforcoroshomepagecountry',
    ]);
  }

  if (isset($kp_facet_block_ids_map[$variables['elements']['#id']])) {
    $suggestions[] = 'block__kp_facet_block';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hq_theme_suggestions_image_formatter_alter(array &$suggestions, array $variables) {
  $entity = $variables['item']->getEntity();
  $field_name = $variables['item']->getParent()->getName();
  $image_style = '';

  if ($variables['image_style']) {
    $image_style = $variables['image_style'] . '__';
  }

  $suggestions[] = 'image_formatter__' . $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $image_style . $field_name;

  $media = $variables['item']->getParent()->getParent()->getEntity();
  if (isset($media->_referringItem)) {
    $paragraph_type = $media->_referringItem->getParent()->getParent()->getEntity()->bundle();
    if ($paragraph_type == 'image_slideshow') {
      $media_caption = \Drupal::service('entity.repository')->getTranslationFromContext($media)->field_caption_image->value;
      $suggestions[] = 'image_formatter__paragraph_image_slideshow';
      $variables['media_caption'] = $media_caption;
    }
  }
}

/**
 * Implements template_preprocess_image_formatter().
 */
function hq_preprocess_image_formatter(array &$variables) {
  $media = $variables['item']->getParent()->getParent()->getEntity();
  if ($media) {
    $media = \Drupal::service('entity.repository')->getTranslationFromContext($media);
    if ($media->hasField('field_caption_image') && !$media->get('field_caption_image')->isEmpty()) {
      $variables['media_caption'] = $media->get('field_caption_image')->value;
    }
  }
}

/**
 *
 */
function hq_preprocess_block(&$variables) {
  // Set global "is_rtl" for RTL pages
  $language = \Drupal::languageManager()->getCurrentLanguage();
  $variables['is_rtl'] = FALSE;
  if ($language->getDirection() == 'rtl') {
    $variables['is_rtl'] = TRUE;
  }

  // Adding custom attribute class for block.
  if ($variables['elements']['#base_plugin_id'] == 'block_content') {
    $blockType = strtr($variables['content']['#block_content']->bundle(), '_', '-');
    $variables['attributes']['class'][] = 'block--type-' . $blockType;
  }
  if ($variables['elements']['#id'] == 'quicktabsresources') {
    $variables['#attached']['library'][] = 'hq/block.quicktabs.latest-resources';
  }
}

/**
 * Implements template_preprocess_field().
 */
function hq_preprocess_field(&$variables, $hook) {
  // Get current node title for the Story navigation component. Used in web/themes/custom/hq/templates/field/field--node--field-builder.html.twig.

  if ($variables['element']['#entity_type'] == 'node') {
    // $node = \Drupal::routeMatch()->getParameter('node');
    $node = $variables['element']['#object'];
    if ($node instanceof NodeInterface) {
      $variables['current_node_title'] = $node->title->value;
    }
  }

  // Retrieve options for the current node's page navigation.
  if ($variables['element']['#field_name'] == 'field_builder') {
    $options = [];
    foreach ($variables['items'] as &$item) {
      $paragraph = $item['content']['#paragraph'];
      // Check if the paragraph has the 'field_title' field and it has a value.
      if ($paragraph->hasField('field_title') && !$paragraph->get('field_title')->isEmpty()) {
        // Get the field_title value.
        $field_title_value = $paragraph->get('field_title')->value;
        // Get the paragraph ID.
        $paragraph_id = $paragraph->id();
        // Add to options array with paragraph ID as key and field_title as value.
        $options[$paragraph_id] = $field_title_value;
      }
    }
    // Add the options array to the variables for use in the template.
    $variables['field_builder_options'] = $options;
  }
  // Unset unnecessary div for the table component: web/themes/custom/hq/templates/paragraphs/Table/table.html.twig.
  $element = $variables['element'];

  if ($element['#field_name'] == 'field_custom_table') {
    unset($variables['items'][0]['content']['tablefield']['#prefix']);
    unset($variables['items'][0]['content']['tablefield']['#suffix']);
  }

  if ($variables['user']->isAnonymous() && $element['#field_name'] == 'field_component') {
    $langcode = hq_get_current_language($variables);
    $variables['items'] = array_filter($variables['items'], function ($item) use ($langcode) {
      $paragraph = $item['content']['#paragraph'] ?? null;
      // If the paragraph doesn't exist or doesn't have the field, keep it (manual card or other type)
      if (!$paragraph || !$paragraph->hasField('field_content_reference')) {
        return true;
      }
      // Get the referenced node
      $node = $paragraph->get('field_content_reference')->entity ?? null;
      if (!$node) {
        // Keep manual cards or unreferenced items.
        return true;
      }

      // Check if the selected node has a translation and belongs to the current domain.
      $has_translation = $node->hasTranslation($langcode);
      $node = $has_translation ? $node->getTranslation($langcode) : $node;
      $current_domain = \Drupal::service('domain.negotiator')->getActiveDomain();
      $node_domains = $node->get('field_domain_access')->getValue();
      $current_domain_id = $current_domain ? $current_domain->id() : NULL;
      // Flatten domain target_ids for comparison.
      $domain_ids = array_column($node_domains, 'target_id');

      // Keep it if no node (manual card) or the node has translation
      return $has_translation && in_array($current_domain_id, $domain_ids);
    });
    $variables['items_amount'] = count($variables['items']);
  }

  if (
    $variables['element']['#field_name'] === 'field_component_items' &&
    isset($variables['element']['#object']) &&
    $variables['element']['#object']->bundle() === 'video_carousel'
  ) {
    $paragraph = $variables['element']['#object'];
    if ($paragraph->hasField('field_items_per_view')) {
      $variables['items_per_view'] = $paragraph->get('field_items_per_view')->value;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 * Adding view modes suggestion as well.
 */
function hq_theme_suggestions_field_alter(&$suggestions, $variables) {
  $suggestions[] = 'field__' . $variables['element']['#entity_type'] . '__' . $variables['element']['#field_name'] . '__' . $variables['element']['#bundle'] . '__' . $variables['element']['#view_mode'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 * Adding container suggestion as well.
 */
function hq_theme_suggestions_container_alter(&$suggestions, $variables, $hook) {
  $suggestions[] = $hook . '__' . 'hq__quicktabs';
}

/**
 * @file
 * Theme and preprocess functions for forms.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hq_theme_suggestions_form_alter(array &$suggestions, array &$variables) {
  $element = $variables['element'];

  // Add a suggestion based on the form id name.
  if (isset($element['#form_id'])) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . $element['#form_id'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hq_theme_suggestions_form_element_alter(array &$suggestions, array &$variables) {
  $element = $variables['element'];

  // Add a suggestion based on the element type.
  if (isset($element['#type'])) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . $element['#type'];
  }
}

/**
 * Implements hook_preprocess_input().
 */
function hq_preprocess_input(&$variables) {
  $element = $variables['element'];

  // Add the element type to the theme.
  $variables['type'] = $element['#type'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hq_form_search_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Update the placeholder and size of field.
  $form['keys']['#title'] = '';
  $form['keys']['#size'] = 20;
  $form['keys']['#placeholder'] = t('Search..');
}

/**
 *
 */
function hq_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $current_domain = \Drupal::service('domain.negotiator')->getActiveId();
  if ($current_domain == 'authoring_unwomen') {
    $form['name']['#attributes']['placeholder'] = t('Username');
    unset($form['name']['#title']);
    unset($form['name']['#description']);
    $form['pass']['#attributes']['placeholder'] = t('Password');
    unset($form['pass']['#title']);
    unset($form['pass']['#description']);
  }
}

/**
 *
 */
function hq_form_openid_connect_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $current_domain = \Drupal::service('domain.negotiator')->getActiveId();
  if ($current_domain == 'authoring_unwomen') {
    $form['#prefix'] = '<div class="form-login-header">Log in <span>to do more</span></div>';
    $form['#suffix'] = '<div class="or-element">or</div>';
    $form['openid_connect_client_windows_aad_login']['#value'] = t('Log in with SSO');
  }
}

/**
 * @file
 * Theme and preprocess functions for html wrapper.
 */

use Drupal\node\NodeInterface;

/**
 *
 */
function hq_preprocess_html(&$variables) {
  unset($variables['page_bottom']['page_bottom']['off_canvas']);
  // Add language classes.
  $current_language = $variables['html_attributes']->toArray();
  $variables['attributes']['class'][] = 'language_' . $current_language['lang'];
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof NodeInterface) {
    // * Add node ID body class.
    $variables['attributes']['class'][] = 'node-' . $node->id();

    // * Add content type machine name body class.
    $variables['attributes']['class'][] = 'node-type--' . str_replace('_', '-', $node->bundle());

    if (\Drupal::service('path.matcher')->isFrontPage()) {
      $variables['attributes']['class'][] = 'frontpage';
    }

    // Handle theme for event and video content type.
    if (in_array($node->getType(), ['event', 'video', 'podcast', 'topics'])) {
      $request = \Drupal::request();
      $theme = $request->query->get('theme');
      if ($theme) {
        $variables['attributes']['class'][] = 'theme-switch';
      }
    }
  }

  // * Check different error conditions to add body classes.
  $route_name = \Drupal::request()->attributes->get('_route');
  if ('system.404' === $route_name) {
    $variables['attributes']['class'][] = 'error404';
  }
  if ('system.403' === $route_name) {
    $variables['attributes']['class'][] = 'error403';
  }

  $request_stack = Drupal::requestStack()->getCurrentRequest();
  if (!is_null($request_stack->attributes->get('exception'))) {
    $status_code = $request_stack->attributes->get('exception')->getStatusCode();
    $variables['attributes']['class'][] = 'error'. $status_code;
  }

  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name == 'view.resource_listing.page_1' || $route_name == 'view.resource_listing.resource_list_by_type') {
    $variables['attributes']['class'][] = 'page--resource-listing';
  }
  if ($route_name == 'view.resource_listing.resource_list_by_type' || $route_name =='view.news_and_story_search.page_1') {
    $variables['attributes']['class'][] = 'page--resource-listing__type';
  }
  if ($route_name == 'view.hq_search.page_1') {
    $variables['attributes']['class'][] = 'page--search';
  }

  // Load specific library for pages with html attribute of RTL
  if ($current_language['dir'] == 'rtl') {
    $variables['#attached']['library'][] = 'hq/rtl';
  } else {
    $variables['#attached']['library'][] = 'hq/ltr';
  }
}

/**
 * @file
 * Theme and preprocess functions for menus.
 */

/**
 * Implements hook_preprocess_menu().
 */
function hq_preprocess_menu(&$variables, $hook) {
  $variables['#cache']['contexts'][] = 'url';
  // No changes for menu toolbar.
  if ($hook == 'menu__toolbar') {
    return;
  }

  // Get the current path.
  $current_path = \Drupal::request()->getRequestUri();
  $active_domain = \Drupal::request()->getSchemeAndHttpHost();
  $langcode = hq_get_current_language($variables);
  $items = $variables['items'];
  if ($variables['menu_name'] == 'dm16407501-main') {
    foreach ($items as $key => $item) {
      if (isset($item['content']['field_block']['#bundle'])) {
        $variables['items'][$key]['is_expanded'] = TRUE;
        $variables['items'][$key]['is_block'] = TRUE;
      }
    }
  }

  foreach ($items as $key => $item) {
    // If path is current_path, set active to li.
    if ($item['url']->toString() == $current_path) {
      // Add active link.
      $variables['items'][$key]['in_active_trail'] = TRUE;
    }
    elseif ($item['url']->toString() == $active_domain) {
      $variables['items'][$key]['attributes']->addClass('active');
    }
    elseif ($item['url']->toString() == $active_domain . '/' . $langcode) {
      $variables['items'][$key]['attributes']->addClass('active');
    }
    elseif ($item['url']->toString() == $active_domain . $current_path) {
      $variables['items'][$key]['in_active_trail'] = TRUE;
    }
  }

}

/**
 * Implements template_preprocess_menu_local_action().
 */
function hq_preprocess_menu_local_action(&$variables) {
  // Add button classes.
  $variables['link']['#options']['attributes']['class'][] = 'btn';
  $variables['link']['#options']['attributes']['class'][] = 'btn-sm';
  $variables['link']['#options']['attributes']['class'][] = 'btn-primary';
}

/**
 * Implements hook_preprocess_ds().
 */
function hq_preprocess_ds_entity_view(&$variables) {
  $variables['node'] = $variables['content']['#node'];
  $variables['view_mode'] = $variables['content']['#view_mode'];
  hq_preprocess_node($variables);
}

/**
 * Implements hook_preprocess_node().
 */
function hq_preprocess_node(&$variables) {
  $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  $variables['language'] = $variables['langcode'];
  $current_domain = \Drupal::service('domain.negotiator')->getActiveId();
  $tag_translation_service = \Drupal::service('unw_knowledge.tag_translation');
  $fragment = $tag_translation_service::EXPOSED_FILTER_BLOCK_ID;
  $variables['is_kp_active'] = FALSE;
  if ($current_domain == 'knowledge_unwomen') {
    $variables['is_kp_active'] = TRUE;
  }
  $node = $variables['node'];

  // Provides Tags Block for video page.
  if (in_array($node->getType(), ['video', 'podcast', 'hq_article', 'courses', 'news_and_stories'])) {
    // Set the correct view path based on the node type.
    switch ($node->getType()) {
      case 'hq_article':
        $view_path = 'view.articles.page_1';
        break;
      case 'news_and_stories':
        $view_path = 'view.news_and_story_search.page_1';
        break;
      default:
        $view_path = 'view.resource_listing.page_1';
        break;
    }
    $video_tags_list = [];

    // Process subject area, region, and country fields.
    $fields = [
      $node->field_subject_area->referencedEntities(),
      $node->field_region->referencedEntities(),
      $node->field_country->referencedEntities(),
    ];

    foreach ($fields as $field) {
      $video_tags_list = array_merge($video_tags_list, $tag_translation_service->generateTagLinks($field, $view_path, $variables['langcode'], $fragment));
    }

    $variables['content']['video_tags'] = $video_tags_list;
    if ($node->getType() != 'hq_article' && $node->getType() != 'courses' && $node->getType() != 'news_and_stories') {
      // Provides variable for multimedia tag title for view page.
      $multimedia_title = \Drupal::service('unw_knowledge.tag_translation')->getMultimediaTagName($node);
      $variables['content']['multimedia_tag'] = [
        '#markup' => is_string($multimedia_title) ? $multimedia_title : '',
      ];
    }
  }
  // UNWWD-734: Fetch the English label of the course category for the course detail page.
  if ($node->getType() == 'courses') {
    $course_category = $node->get('field_course_category')->target_id;
    $term = $course_category ? Term::load($course_category) : NULL;
    $category_value = $term?->getTranslation('en')->label() ?? $term?->label() ?? '';
    // Store the English label of the taxonomy term.
    $variables['category_value'] = $category_value;
  }
  // Process publications terms.
  if ($node->getType() == 'publication') {
    $view_url = ($current_domain == "knowledge_unwomen")
    ? Url::fromRoute('view.resource_listing.page_1')->toString()
    : Url::fromRoute('view.publication_hq.page_1')->toString();
    // Pass the active domain to the template.
    if (isset($variables['content']['field_subject_area'])) {
      $subject_area_terms = [];
      foreach ($variables['content']['field_subject_area'] as $key => $item) {
        if (is_numeric($key)) {
          $term_entity = $item['#options']['entity'];
          $tid = $term_entity->id();
          $tag_url = ($current_domain == "knowledge_unwomen") ? rtrim($view_url, '/') . "?f[0]=topics:$tid#$fragment" : rtrim($view_url, '/'). "?f[0]=topics_hq:$tid#$fragment";
          $subject_area_terms[] = [
            'name' => $term_entity->getName(),
            'id' => $term_entity->get('tid')->getValue()['0']['value'],
            'tag_url' => $tag_url,
            ];
        }
      }
      $variables['content']['subject_area_terms'] = $subject_area_terms;
    }
    if (isset($variables['content']['field_resource_type'])) {
      $resource_type_terms = [];
      foreach ($variables['content']['field_resource_type'] as $key => $item) {
        if (is_numeric($key)) {
          $resource_type_terms[] = [
            'name' => $item['#title'],
            'id' => $item['#options']['entity']->get('tid')->getValue()['0']['value'],
          ];
        }
      }
      $variables['content']['resource_type_terms'] = $resource_type_terms;
    }

    if (isset($variables['content']['field_publication_series'])) {
      $publication_series_terms = [];
      foreach ($variables['content']['field_publication_series'] as $key => $item) {
        if (is_numeric($key)) {
          $publication_series_terms[] = [
            'name' => $item['#title'],
            'id' => $item['#options']['entity']->get('tid')->getValue()['0']['value'],
          ];
        }
      }
      $variables['content']['publication_series_terms'] = $publication_series_terms;
    }

    if (isset($variables['content']['field_publishing_office'])) {
      $publishing_office_terms = [];
      foreach ($variables['content']['field_publishing_office'] as $key => $item) {
        if (is_numeric($key)) {
          $publishing_office_terms[] = [
            'name' => $item['#title'],
            'id' => $item['#options']['entity']->get('tid')->getValue()['0']['value'],
          ];
        }
      }
      $variables['content']['publishing_office_terms'] = $publishing_office_terms;
    }

    if (isset($variables['content']['field_governing_body'])) {
      $governing_body_terms = [];
      foreach ($variables['content']['field_governing_body'] as $key => $item) {
        if (is_numeric($key)) {
          $governing_body_terms[] = [
            'name' => $item['#title'],
            'id' => $item['#options']['entity']->get('tid')->getValue()['0']['value'],
          ];
        }
      }
      $variables['content']['governing_body_terms'] = $governing_body_terms;
    }

    if (isset($variables['content']['field_publishing_entity'])) {
      $publishing_entity_terms = [];
      foreach ($variables['content']['field_publishing_entity'] as $key => $item) {
        if (is_numeric($key)) {
          $publishing_entity_terms[] = [
            'name' => $item['#title'],
            'id' => $item['#options']['entity']->get('tid')->getValue()['0']['value'],
          ];
        }
      }
      $variables['content']['publishing_entity_terms'] = $publishing_entity_terms;
    }

    if (isset($variables['content']['field_country'])) {
      $country_terms = [];
      foreach ($variables['content']['field_country'] as $key => $item) {
        if (is_numeric($key)) {
          $country_terms[] = [
            'name' => $item['#title'],
            'id' => $item['#options']['entity']->get('tid')->getValue()['0']['value'],
            'tag_url' => ($current_domain == "knowledge_unwomen") ? $view_url . "?f[0]=country:" . $item['#options']['entity']->get('tid')->getValue()['0']['value'] . '#' . $fragment : $view_url . "?f[0]=country_publication_hq:" . $item['#options']['entity']->get('tid')->getValue()['0']['value'] . '#' . $fragment,
          ];
        }
      }
      $variables['content']['country_terms'] = $country_terms;
    }

    if (isset($variables['content']['field_region'])) {
      $region_terms = [];
      foreach ($variables['content']['field_region'] as $key => $item) {
        if (is_numeric($key)) {
          $region_terms[] = [
            'name' => $item['#title'],
            'id' => $item['#options']['entity']->get('tid')->getValue()['0']['value'],
            'tag_url' => ($current_domain == "knowledge_unwomen") ? $view_url . "?f[0]=regions:" . $item['#options']['entity']->get('tid')->getValue()['0']['value'] . '#' . $fragment : $view_url . "?f[0]=region_hq:" . $item['#options']['entity']->get('tid')->getValue()['0']['value'] . '#' . $fragment,
          ];
        }
      }
      $variables['content']['region_terms'] = $region_terms;
    }
  }
  // Provide an array of language objects, so that we can build language
  // sensitive URLs in Twig.
  // Can be simplified once
  // https://www.drupal.org/project/drupal/issues/2363459 lands in.
  $variables['languages'] = \Drupal::languageManager()->getLanguages();

  // Fix media caption.
  if (!empty($variables['content']['field_media_image_hero']['0']['#media']->field_caption_image->value)) {
    $media_caption = $variables['content']['field_media_image_hero']['0']['#media']->field_caption_image->value;
    $variables['media_caption'] = $media_caption;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() to suggest templates for nodes.
 */
function hq_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['#node'])) {
    // Get the node object.
    $node = $variables['elements']['#node'];

    if ($node instanceof NodeInterface && $node->getType() == 'hq_complex_page') {

      $page_type = $node->field_page_type->value;
      // Check if the node is of a specific content type and has a specific ID.
      if (in_array($page_type, ['country', 'topic_landing_page'])) {
        // Add a suggestion for the custom template.
        $suggestions[] = 'node__' . $node->getType() . '__topic';
      }
    }
  }
}

/**
 * @file
 * Theme and preprocess functions for pages.
 */

/**
 * Adds theme path alias suggestion for use in system pages bundle.
 */
function hq_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $result = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

  $path_alias = trim($result, '/');
  $path_alias = str_replace('/', '-', $path_alias);
  $path_alias = str_replace('-', '_', $path_alias);

  $suggestions[] = 'page__path__' . $path_alias;

  // Defines custom theme suggestions based on the route.
  $route_name = \Drupal::request()->attributes->get('_route');
  if ('system.404' === $route_name) {
    $suggestions[] = 'page__404';
  }
  if ('system.403' === $route_name) {
    $suggestions[] = 'page__403';
  }

  $request_stack = Drupal::requestStack()->getCurrentRequest();
  if (!is_null($request_stack->attributes->get('exception'))) {
    $status_code = $request_stack->attributes->get('exception')->getStatusCode();
    $suggestions[] = 'page__' . (string) $status_code;
  }

  // * Adds page node type theme suggestion.
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    // if ($node_revision = \Drupal::routeMatch()->getParameter('node_revision')) {
    //   if ($loaded_revision = \Drupal::entityTypeManager()->getStorage('node')->loadRevision($node_revision->getRevisionId())) {
    //     $node = $loaded_revision;
    //   }
    // }
    if ($node instanceof NodeInterface) {
      $suggestions[] = 'page__node__' . $node->getType();
    }
  }

  // * Add view mode theme suggestions based on the vocabulary
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $term = Term::load($tid);
    $suggestions[] = 'page__taxonomy__' . $term->bundle();
  }
  // Page sugestions for views pages listing.
  $view_id = \Drupal::routeMatch()->getParameter('view_id');
  if ($view_id === 'publication_hq') {
    $suggestions[] = 'page__publication_hq';
  }
  if ($view_id === 'news_and_story_search') {
    $suggestions[] = 'page__news_and_story_search';
  }
  if ($view_id === 'search_ambassadors_') {
    $suggestions[] = 'page__ambassadors_and_advocates';
  }

  $kp_listing_routes = [
    'view.hq_articles.articles_by_thematic_area',
    'view.hq_articles.articles_by_country',
    'view.hq_articles.resources_by_subject_country',
    'view.hq_articles.resources_by_subject_area',
  ];

  if (in_array(\Drupal::routeMatch()->getRouteName(), $kp_listing_routes)) {
    $suggestions[] = 'page__custom_listing';
  }
}

/**
 * @file
 * Theme and preprocess functions for taxonomy and vocabularies.
 */

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function hq_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}

/**
 * @file
 * Theme and preprocess functions for views.
 */

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hq_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  // Add a suggestion based on the view name and the current display.
  $view = $variables['view'];
  $name = $view->id();
  $display = $view->current_display;
  $suggestions[] = 'views_view__' . $name;
  $suggestions[] = 'views_view__' . $name . '__' . $display;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hq_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  // Add a suggestion based on the view name and the current display.
  $view = $variables['view'];
  $name = $view->id();
  $display = $view->current_display;
  $suggestions[] = 'views_view_unformatted__' . $name . '__' . $display;
  
  if (strpos($variables['view']->id(), 'hq_highlight_component') !== FALSE &&
      strpos($variables['view']->current_display, 'block_') === 0) {
    $suggestions[] = 'views_view_unformatted__hq_highlight_component__block';
  }
  return $suggestions;
}

/**
 * Implements template_preprocess_paragraph().
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - paragraph: The paragraph object.
 *   - view_mode: View mode; e.g., 'full', 'teaser'...
 */
// function hq_preprocess_paragraph__hero(&$variables) {
//   /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
//   $paragraph = $variables['paragraph'];

//   if (!$paragraph->field_media_image->isEmpty()) {
//     foreach ($paragraph->field_media_image as $item) {
//       if ($item->entity) {
//         $mtid = $item->entity->get('field_media_image')->target_id;
//         $file = File::load($mtid);
//         $style = \Drupal::entityTypeManager()->getStorage('image_style')->load('hq_hero_banner_webp');
//         $url = $style->buildUrl($file->getFileUri());
//         $relative_url = \Drupal::service('file_url_generator')->generateString($url, ['absolute' => FALSE]);
//         $hero_images[] = $relative_url;
//       }
//     }

//     // Random background image for the "Hero" paragraph
//     // - web/themes/custom/hq/templates/paragraphs/Hero/paragraph--hero.html.twig.
//     $variables['backgroundImage'] = $hero_images[array_rand($hero_images)];
//     \Drupal::state()->set('hero_backgroundImage', $variables['backgroundImage']);
//   }
// }

/**
 * Implements template_preprocess_paragraph().
 */
function hq_preprocess_paragraph__download_in(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  if (isset($variables['paragraph']->get('field_upload_file')->getValue()[0]['target_id'])) {
    $media = $variables['elements']['field_upload_file'][0]['#media'];
    $file_id = $media->field_media_document->getValue()[0]['target_id'];
    $file = File::load($file_id);
    $file_url = $file->createFileUrl();
    $variables['file_url'] = $file_url;
  }
}

/**
 * Implements template_preprocess_paragraph().
 */
function hq_preprocess_paragraph__image(&$variables) {
  $paragraph = $variables['paragraph'];

  if (!$paragraph->field_media_image->isEmpty()) {
    foreach ($paragraph->field_media_image as $item) {
      if ($item->entity) {
        $media_caption = \Drupal::service('entity.repository')->getTranslationFromContext($item->entity)->field_caption_image->value;
      }
    }

    // Send media caption to twig template.
    $variables['media_caption'] = $media_caption;
  }
}

/**
 * Implements template_preprocess_paragraph().
 */
function hq_preprocess_paragraph__strategic_card(&$variables) {
  $paragraph = $variables['paragraph'];
  // Get values of the style and alignement and set them to variables.
  $columns = $paragraph->get('field_color_scheme')->getValue();

  if (isset($columns)) {
    $style_columns = $paragraph->field_color_scheme->getSetting('allowed_values')[$columns[0]['value']];
  }
  $variables['style_columns'] = 'class-' . strtolower($style_columns);

}

/**
 * Implements template_preprocess_paragraph().
 */
function hq_preprocess_paragraph__video_carousel(&$variables) {
  $tag_translation_service = \Drupal::service('unw_knowledge.tag_translation');
  $fragment = $tag_translation_service::EXPOSED_FILTER_BLOCK_ID;

  $url = Url::fromRoute('view.resource_listing.page_3', [], [
    'query' => [
      'f' => [
        0 => 'type:' .'video',
      ],
      'video_type' => 'portrait',
    ],
    'absolute' => TRUE,
    'fragment' => $fragment,
  ]);
  // Set variable for view all link.
  $variables['content']['view_all_link'] = Link::fromTextAndUrl(t('VIEW ALL'), $url)->toRenderable();
}

/**
 * Implements template_preprocess_paragraph().
 */
function hq_preprocess_paragraph__card_featured(&$variables) {
  $lang = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();

  // Fix translated homepage image card.
  $content_id = $variables['elements']['#paragraph']->field_content_reference->getValue()[0]['target_id'];
  $node = Node::load($content_id);
  $node_img = $node->getTranslation($lang)->field_media_image->getValue()[0]['target_id'];
  $node_img = Media::load($node_img);
  $node_img = $node_img->field_media_image->getValue()[0]['target_id'];
  $node_img = File::load($node_img);
  $node_img = $node_img->createFileUrl();

  $variables['node_img'] = $node_img;
  $variables['language'] = $lang;
}

/**
 * Implements theme_preprocess_breadcrumb().
 */
function hq_preprocess_breadcrumb(&$variables) {
  $node = \Drupal::request()->attributes->get('node');
  $lang = $variables['langcode'];

  $current_domain = \Drupal::service('domain.negotiator')->getActiveId();
  if ($node instanceof NodeInterface) {
    // $node = \Drupal::request()->attributes->get('node');
    // Remove duplicated home page link.
    if (($node->getType() == 'news_and_stories') && ($lang !== 'en')) {
      if (count($variables['breadcrumb']) > 2) {
        unset($variables['breadcrumb']['1']);
        unset($variables['links']['1']);
      }
    }
    if (($node->getType() == 'publication') && ($current_domain == 'hq_unwomen')) {
      if (count($variables['breadcrumb']) > 2) {
        if ($lang == 'en') {
          $variables['breadcrumb']['2']['url'] = "/en/resources";
        }
        if ($lang == 'es') {
          $variables['breadcrumb']['2']['url'] = "/es/recursos";
        }
        if ($lang == 'fr') {
          $variables['breadcrumb']['2']['url'] = "/fr/ressources";
        }
      }
    }
    if (($node->getType() == 'hq_profile')) {
      // Get node title.
      $node_title = $node->get('title')->value;
      // Create new instances of breadcrumb tree.
      $breadcrumb = new Breadcrumb();
      $variables['links'] = $breadcrumb;
      $variables['breadcrumb']['2']['text'] = $node_title;
    }
    // Unset the breadcrumb on 'ro_co_s_homepage' content.
    if (($node->getType() == 'ro_co_s_homepage')) {
      unset($variables['breadcrumb']);
    }
  }

  // Fix wrong 'In focus' breadcrumb.
  if (isset($variables['breadcrumb']['1']['url'])) {
    if ($variables['breadcrumb']['1']['url'] == '/' . $lang . '/news/in-focus') {
      // Get path of node and process it.
      $alias_url = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $node->id(), $lang);
      $alias_url = preg_match('/\/(.*?)\//', $alias_url, $match);
      $url_object = \Drupal::service('path.validator')->getUrlIfValid('/' . $lang . '/' . $match[1] . '/');

      // Load node and get the title.
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($url_object->getrouteParameters()['node']);

      if ($node) {
        $node_title = $node->getTranslation($lang)->field_title->value;
        // Rewrite breadcrumb part.
        $variables['breadcrumb']['1']['text'] = $node_title;
        $variables['breadcrumb']['1']['url'] = '/' . $lang . '/' . $match[1] . '/';
      }
    }
  }

  if ($current_domain == 'knowledge_unwomen' && (\Drupal::routeMatch()->getRouteName() == 'view.resource_listing.page_1')) {
    if (count($variables['breadcrumb']) == 2) {
      unset($variables['breadcrumb'][1]);
    }
  }

  // Unset breadcrumb for root parent for topic landing page.
  if ($node instanceof NodeInterface && $node->getType() == 'topics') {
    $topic_parent = $node->get('field_topic_parent')->referencedEntities();
    if (empty($topic_parent)) {
      unset($variables['breadcrumb'][0]);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for image elements.
 */
function hq_preprocess_image(&$variables) {
  // Get the file path from the image URI.
  $file_path = \Drupal::service('file_system')->realpath($variables['uri']);
  // Check if the file path exists.
  if (file_exists($file_path)) {
    // Get the last modified timestamp of the image file.
    $timestamp = filemtime($file_path);
    // Create a file URL with the timestamp as a query parameter.
    $file_url = \Drupal::service('file_url_generator')->generateString($variables['uri']);
    // Transform the file URL into a relative path.
    $relative_path = \Drupal::service('file_url_generator')->transformRelative($file_url);
    // Append the timestamp as a query parameter to the image URI.
    $variables['attributes']['src'] = $relative_path . '?t=' . $timestamp;
  }
  $variables['attributes']['loading'] = 'lazy';

  if (!empty($variables['attributes']['class']) && in_array('hero-banner-image', $variables['attributes']['class'])) {
    $variables['attributes']['loading'] = 'eager';
    $variables['attributes']['fetchpriority'] = 'high';
  }
}

/**
 * Implements hook_preprocess_paragraph__hero_banner_item().
 */
function hq_preprocess_paragraph__hero_banner_item(array &$variables) {
  if (!empty($variables['paragraph']) && $variables['paragraph']->hasField('field_image')) {
    $media = $variables['content']['field_image'][0]['#media'] ?? NULL;

    if ($media instanceof MediaInterface && $media->bundle() === 'image' && $media->hasField('field_media_image')) {
      $image_field = $media->get('field_media_image');

      if (!$image_field->isEmpty() && ($file = $image_field->entity) && $file instanceof FileInterface) {
        $variables['content']['field_image'] = [[
          '#theme' => 'responsive_image',
          '#responsive_image_style_id' => 'hq_hero_banner',
          '#uri' => $file->getFileUri(),
          '#alt' => $image_field->alt,
          '#title' => $image_field->title,
          '#attributes' => [
            'class' => ['hero-banner-image'],
          ],
        ]];
      }
    }
  }
}

/**
 * Implements template_preprocess_paragraph.
 */
function hq_preprocess_paragraph(&$variables) {
  if (isset($variables["content"]["field_link_limited"]) && $variables['paragraph']->getType() == 'content_carousel') {
    $variables["content"]["field_link_limited"][0]["#title"] = t('View all');
  }
}

/**
 * Implements template_preprocess_paragraph__paragraph_id.
 */
function hq_preprocess_paragraph__content_carousel_item(&$variables) {
  $current_lang = hq_get_current_language($variables);
  $paragraph = $variables['paragraph'];
  $media = $paragraph->get('field_upload_file')->entity;
  $node = new stdClass();
  $referenced_content = !$paragraph->get('field_content_reference')->isEmpty() && isset($variables['content']['field_content_reference'][0]['#node']);
  $image_field_exists = $paragraph->hasField('field_image_limited_media');
  if ($image_field_exists && isset($variables['content']['field_image_limited_media']['0'])) {
    $parent = $paragraph->getParentEntity();
    $paragraph_type = $parent->get('paragraph_view_mode')->value;
    if ($paragraph_type == 'publication_card') {
      $img_style = 'card_big_340_482';
    } else {
      $img_style = 'card_340x247';
    }
    $display_options = [
      'label'    => 'hidden',
      'type'     => 'responsive_image',
      'settings' => [
        'responsive_image_style' => $img_style,
      ],
    ];
    $image = $paragraph->get('field_image_limited_media')->entity->field_media_image->view($display_options);
    $variables['content']['field_image_limited_media'][0] = $image;
  }

  if (!isset($variables['content']['field_content_reference'][0]['#node'])) {
    return;
  }

  if ($referenced_content) {
    $node = $variables['content']['field_content_reference'][0]['#node'];
    $referenced_content = $paragraph->get('field_content_reference')->referencedEntities();
    $referenced_content = $referenced_content[0];
    if ($referenced_content->hasTranslation($current_lang)) {
      $referenced_content = $referenced_content->getTranslation($current_lang);
    }
    $node->is_document = FALSE;
  }

  if (!$paragraph->get('field_title')->isEmpty()) {
    $node->card_title = $paragraph->get('field_title')->value;
  }
  elseif ($referenced_content && $referenced_content->hasField('field_title') && !$referenced_content->get('field_title')->isEmpty()) {
    $node->card_title = $referenced_content->get('field_title')->value;
  }
  else {
    $node->card_title = $referenced_content->getTitle();
  }

  if (!$paragraph->get('field_tag')->isEmpty()) {
    $pargraph_tags = $paragraph->get('field_tag')->referencedEntities();
    $node->card_tag = count($pargraph_tags) ? $pargraph_tags[0]->get('name')->value : '';
  }
  elseif ($referenced_content && $referenced_content->hasField('field_story_type')) {
    $story_type = $referenced_content->get('field_story_type')->referencedEntities()[0] ?? null;
    $node->card_tag = $story_type
      ? ($story_type->hasTranslation($current_lang) ? $story_type->getTranslation($current_lang) : $story_type)
      ->get('name')->value : '';
  }
  elseif ($referenced_content && $referenced_content->hasField('field_resource_type')) {
    $resource_type = $referenced_content->get('field_resource_type')->referencedEntities();
    $node->card_tag = count($resource_type) ? $resource_type[0]->get('name')->value : '';
  }
  elseif ($node->bundle() === 'video') {
    $multimedia_title = \Drupal::service('unw_knowledge.tag_translation')->getMultimediaTagName($node);
    $node->card_tag = $multimedia_title;
  }
  elseif ($node->bundle() === 'podcast') {
    $multimedia_title = \Drupal::service('unw_knowledge.tag_translation')->getMultimediaTagName($node);
    $node->card_tag = $multimedia_title;
  }
  elseif ($referenced_content && $referenced_content->bundle() === 'event') {
    $event_type = $referenced_content->get('field_event_type')->referencedEntities();
    $node->card_tag = count($event_type) ? $event_type[0]->get('name')->value : '';
  }
  elseif ($referenced_content && $referenced_content->bundle() === 'websites') {
    $node->card_tag = t('Website');
  }

  elseif ($referenced_content && $referenced_content->bundle() === 'courses') {
    if ($referenced_content->hasField('field_course_category') && !$referenced_content->get('field_course_category')->isEmpty()) {
      $course_type_value = $referenced_content->get('field_course_category')->referencedEntities()[0] ?? null;
      $node->card_tag = $course_type_value
        ? ($course_type_value->hasTranslation($current_lang) ? $course_type_value->getTranslation($current_lang) : $course_type_value)
        ->get('name')->value : '';
      }
  }

  if (!$paragraph->get('field_link_limited')->isEmpty()) {
    $node->card_link = $variables['content']['field_link_limited'];
  } else {
    $node->card_link = $referenced_content->toUrl();
  }

  if (!$paragraph->get('field_publication_date')->isEmpty()) {
    $node->card_publication_date = $variables['content']['field_publication_date'];
  } else {
    $node->card_publication_date = $referenced_content->get('field_story_publication_date')->value;
  }

  if (!empty($media) && $media->bundle() === 'document') {
    $node->is_document = TRUE;
    $url = $media->field_media_document->entity->createFileUrl();
    $is_external = UrlHelper::isExternal($url);
    $url_object;
    // Create a URL object based on the URL type.
    if ($is_external) {
      // For external URLs, simply use the URL string.
      $url_object = Url::fromUri($url);
    }
    else {
      // For internal URLs, use the 'internal:' scheme.
      $url_object = Url::fromUri('internal:' . $url);
    }

    $resource_link = Link::fromTextAndUrl('resource download_link', $url_object);
    $resource_link_render_array = $resource_link->toRenderable();
    $node->download_link = $resource_link_render_array;
  }

  if (!$paragraph->get('field_image_limited_media')->isEmpty()) {
    $node->card_image = $variables['content']['field_image_limited_media'];
  } else {
    if ($referenced_content->hasField('field_media_image') && !$referenced_content->get('field_media_image')->isEmpty()) {
      $media_image_field = $referenced_content->get('field_media_image')->value;
      $node->card_image = $media_image_field;
    }
  }
}

/**
 * Implements template_preprocess_paragraph__paragraph_id.
 */
function hq_preprocess_paragraph__content_highlight(&$variables) {
  $paragraph = $variables['paragraph'];
  $media = $paragraph->get('field_download_files')->entity;
  $node = new stdClass();
  $variables['content_ref_val'] = FALSE;
  $referenced_content = !$paragraph->get('field_content_reference')->isEmpty() && isset($variables['content']['field_content_reference'][0]['#node']);
  $image_field_exists = $paragraph->hasField('field_image_limited_media');
  $image_orientation = $paragraph->get('field_image_orientation')->value;
  $layout = $paragraph->get('field_layout')->value;

  $img_style = ($image_orientation == 'vertical' && $layout == 'full_width')
    ? 'publication_highlight_vertical'
    : 'publication_highlight_horizontal';

  $display_options = [
    'label'    => 'hidden',
    'type'     => 'responsive_image',
    'settings' => [
      'responsive_image_style' => $img_style,
    ],
  ];

  if ($image_field_exists && isset($variables['content']['field_image_limited_media']['0'])) {
    $image = $paragraph->get('field_image_limited_media')->entity->field_media_image->view($display_options);
    $variables['content']['field_image_limited_media'][0] = $image;
  }

  if (!empty($media)) {
    $download_files = $paragraph->get('field_download_files')->getValue();
    $current_lang_download_file = \Drupal::service('unw_knowledge.tag_translation')->GetCurrentlangDownloadfiles($download_files);
    $variables['content']['field_download_files'] = $current_lang_download_file;
  }
  // Storing variable to hiding the empty card for non-translated content refrence field.
  if(!$paragraph->get('field_content_reference')->isEmpty()){
    $variables['content_ref_val'] = TRUE;
  }

  if (!isset($variables['content']['field_content_reference'][0]['#node'])) {
    return;
  }

  if ($referenced_content) {
    $current_lang = hq_get_current_language($variables);
    $node = $variables['content']['field_content_reference'][0]['#node'];
    $referenced_content = $paragraph->get('field_content_reference')->referencedEntities();
    $referenced_content = $referenced_content[0];
    if ($referenced_content->hasTranslation($current_lang)) {
      $referenced_content = $referenced_content->getTranslation($current_lang);
    }
    $node->is_document = FALSE;
  }
  if (!$paragraph->get('field_title')->isEmpty()) {
    $node->card_title = $paragraph->get('field_title')->value;
  }
  elseif ($referenced_content && $referenced_content->hasField('field_title') && !$referenced_content->get('field_title')->isEmpty()) {
    $node->card_title = $referenced_content->get('field_title')->value;
  }
  else {
    $node->card_title = $referenced_content->getTitle();
  }

  if (!empty($media)) {
    $node->is_document = TRUE;
    $node->download_link = $variables['content']['field_download_files'];
  }
  else {
    $download_files = $node->get('field_download_files')->getValue();
    $current_lang_download_file = \Drupal::service('unw_knowledge.tag_translation')->GetCurrentlangDownloadfiles($download_files);
    $node->download_link = $current_lang_download_file;
    $variables['content']['field_download_files'] = $current_lang_download_file;
  }

  if (!$paragraph->get('field_image_limited_media')->isEmpty()) {
    $node->card_image = $variables['content']['field_image_limited_media'];
  }
  else {
    if(!$node->get('field_media_image')->isEmpty()) {
      $media_image = $node->get('field_media_image')->entity->field_media_image->view($display_options);
      $node->card_image = $media_image;
      $variables['content']['field_image'] = $media_image;
    }
  }
}

/**
 * Implements template_preprocess_paragraph__paragraph_id.
 */
function hq_preprocess_paragraph__quotes(&$variables) {
  $paragraph = $variables['paragraph'];
  $langcode = $paragraph->language()->getId();
  $translated_paragraph = \Drupal::service('entity.repository')->getTranslationFromContext($paragraph, $langcode);
  $background_colour = $translated_paragraph->get('field_background_colour')->target_id;

  // Provides variable for hex code from term id.
  if ($background_colour) {
    $term = Term::load($background_colour);
    if ($term) {
      $hex_code = $term->get('field_hex_colour')->value;
      $variables['content']['background_hex_code'] = $hex_code;
    }
  }
}

/**
 * Implements template_preprocess_paragraph__paragraph_id.
 */
function hq_preprocess_paragraph__photo_slider(&$variables) {
  $paragraph = $variables['paragraph'];
  $langcode = $paragraph->language()->getId();
  $translated_paragraph = \Drupal::service('entity.repository')->getTranslationFromContext($paragraph, $langcode);
  $background_colour = $translated_paragraph->get('field_background_colour')->target_id;

  // Provides variable for hex code from term id.
  if ($background_colour) {
    $term = Term::load($background_colour);
    if ($term) {
      $hex_code = $term->get('field_hex_colour')->value;
      $variables['content']['background_hex_code'] = $hex_code;
    }
  }
  // Initialize an array to store all slider images.
  $slider_images = [];
  // Get all photo slider items.
  $photo_slider_items = $translated_paragraph->get('field_photo_slider_items')->referencedEntities();
  foreach ($photo_slider_items as $item) {
    $translated_item = \Drupal::service('entity.repository')->getTranslationFromContext($item, $langcode);
    // Load the media entity from the image field.
    $media = $translated_item->get('field_image')->entity;
    if ($media) {
      // Use the hq_photo_slider view mode of the media entity.
      $slider_images[] = \Drupal::entityTypeManager()
        ->getViewBuilder('media')
        ->view($media, 'hq_photo_slider');
    }
  }
  // Provide all the image in photo slider iteam list.
  $variables['content']['slider_images'] = $slider_images;
}

/**
 * Implements template_preprocess_paragraph__paragraph_id.
 */
function hq_preprocess_paragraph__timeline_component(&$variables) {
  $paragraph = $variables['paragraph'];
  $langcode = $paragraph->language()->getId();
  $translated_paragraph = \Drupal::service('entity.repository')->getTranslationFromContext($paragraph, $langcode);
  $component = $translated_paragraph->get('field_component')->referencedEntities();

  // Initialize the year-month array.
  $year_month_associations = [];

  foreach ($component as $item) {
    $translated_component = \Drupal::service('entity.repository')->getTranslationFromContext($item, $langcode);
    $publication_date = $translated_component->get('field_publication_date')->value;
    $date_preferences = $translated_component->get('field_date_preference')->getValue();

    if ($publication_date) {
      // Extract year and month from the publication date.
      $year = date('Y', strtotime($publication_date));
      $month = date('M', strtotime($publication_date)); // Example: Jan, Feb, Mar

      // Check if the year is already set, if not, initialize it.
      if (!isset($year_month_associations[$year])) {
        $year_month_associations[$year] = [];
      }

      $selected_date_types = [];
      // Check if $date_preferences has values.
      if (!empty($date_preferences)) {
        foreach ($date_preferences as $preference) {
          if (isset($preference['value'])) {
            $selected_date_types[] = $preference['value'];
          }
        }
      }

      // Add the month and preference only if it's not already added.
      if (!$month_exists) {
        $year_month_associations[$year][] = [
          'month' => $month,
          'preference' => $selected_date_types, // Add preference as a string.
        ];
      }
    }
  }

  // Pass the array to the Twig template.
  $variables['content']['year_month_filter_array'] = $year_month_associations;
}


/**
 * Implements template_preprocess_paragraph__paragraph_id.
 */
function hq_preprocess_paragraph__timeline_component_item(&$variables) {
  $paragraph = $variables['paragraph'];
  $langcode = $paragraph->language()->getId();
  $translated_paragraph = \Drupal::service('entity.repository')->getTranslationFromContext($paragraph, $langcode);
  $field_image_orientation = $translated_paragraph->get('field_image_orientation')->value;
  $background_colour = $translated_paragraph->get('field_background_colour')->target_id;
  // Retrieve and store the selected date preference values (year, month, date).
  $date_preference = $translated_paragraph->get('field_date_preference')->getValue();
  $selected_date_types = [];
  if (!empty($date_preference)) {
    foreach ($date_preference as $preference) {
      if (isset($preference['value'])) {
        $selected_date_types[] = $preference['value'];
      }
    }
  }
  $variables['date_preference_selected'] = $selected_date_types;
  // Provides variable for hex code from term id.
  if ($background_colour) {
    $term = Term::load($background_colour);
    if ($term) {
      $hex_code = $term->get('field_hex_colour')->value;
      $variables['content']['background_hex_code'] = $hex_code;
    }
  }
  // Get and render the image field.
  $field_media_image = $translated_paragraph->get('field_image');
  if (!$field_media_image->isEmpty()) {
    // Apply image style based on the card layout.
    $img_style = ($field_image_orientation == 'horizontal') ? 'hq_timeline_image_3_2' : 'hq_timeline_image_2_3';
    $display_options_image = [
      'label' => 'hidden',
      'type' => 'responsive_image',
      'settings' => [
        'responsive_image_style' => $img_style,
      ],
    ];
    $image = $paragraph->get('field_image')->entity->field_media_image->view($display_options_image);
    $variables['content']['field_image'] = $image;
  }
}

/**
 * Implements theme_preprocess_views_view_summary_unformatted.
 */
function hq_preprocess_views_view_summary_unformatted(&$variables) {
  $view = $variables['view'];
  if ($view->id() == 'glossary_listing' && $view->current_display == 'attachment_1') {
    // Get the current path from the request object.
    $request = \Drupal::request();
    // Get only the path part.
    $current_path = $request->getPathInfo();

    // Load the alias manager service.
    $alias_manager = \Drupal::service('path_alias.manager');

    // Get the view path with a leading slash.
    $view_path = '/' . ltrim($view->getPath(), '/');

    // Get the current language.
    $language_manager = \Drupal::languageManager();
    $language = $language_manager->getCurrentLanguage();
    $langcode_prefix = $language->getId();

    // Prepend language prefix to view path.
    $view_path_with_lang = '/' . $langcode_prefix . '/' . ltrim($view->getPath(), '/');

    // Get the alias for the view path with the language prefix.
    $alias_view_path_with_lang = $alias_manager->getAliasByPath($view_path, $language->getId());
    $alias_view_path_with_lang = strlen($alias_view_path_with_lang) ? '/' . $langcode_prefix . $alias_view_path_with_lang : $alias_view_path_with_lang;

    // Check if the current path matches the original view path or its alias.
    $is_active = ($current_path === $view_path_with_lang || $current_path === $alias_view_path_with_lang);

    // Set the URL for the "All" link using the alias if available, otherwise use the original view path.
    $all_terms_url = !empty($alias_view_path_with_lang) ? $alias_view_path_with_lang : $view_path_with_lang;

    // Create the "All" term object.
    $all_terms = new stdClass();
    $all_terms->url = $all_terms_url;
    $all_terms->separator = Xss::filterAdmin($variables['options']['separator']);
    $all_terms->active = $is_active;
    $all_terms->link = t('All');
    $all_terms->attributes = new Attribute([]);

    // Add the "All" term object to the rows.
    $variables['rows'][] = $all_terms;
  }
}

/**
 * Implements hook_preprocess_pager().
 *
 * @param $variables
 */
function hq_preprocess_pager(&$variables) {
  $current_route = \Drupal::routeMatch();
  $route_name = $current_route->getRouteName();

  if ($route_name == 'view.glossary_listing.page_1') {
    // Define the fragment to add.
    $fragment = '#block-hq-content';
    // Loop through the pager items.
    foreach (['pages', 'next', 'last', 'previous', 'first'] as $key) {
      if (isset($variables['items'][$key])) {
        // If the key is "pages", loop through the page numbers.
        if ($key === 'pages') {
          foreach ($variables['items'][$key] as &$page_item) {
            // Add the fragment to the href of each page item.
            $page_item['href'] .= $fragment;
          }
        }
        else {
          // Add the fragment to the href of the pager item.
          $variables['items'][$key]['href'] .= $fragment;
        }
      }
    }
  }
}

/**
 * Implements template_preprocess_paragraph__paragraph_id.
 */
function hq_preprocess_paragraph__basic_cta(&$variables) {
  $paragraph = $variables['paragraph'];
  $variation = $paragraph->hasField('field_variation') ? $paragraph->get('field_variation')->value != 'right_aligned' : FALSE;
  $image_field_exists = $paragraph->hasField('field_image_limited_media') ? TRUE : FALSE;
  if ($variation && $image_field_exists && isset($variables['content']['field_image_limited_media']['0'])) {
    $display_options = [
      'label'    => 'hidden',
      'type'     => 'responsive_image',
      'settings' => [
        'responsive_image_style' => 'basic_cta',
      ],
    ];

    $image = $paragraph->get('field_image_limited_media')->entity->field_media_image->view($display_options);
    $variables['content']['field_image_limited_media'][0] = $image;
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function hq_preprocess_views_view(&$variables) {
  // Change view mode for featured latest new.
  if ($variables['view']->id() == 'latest_news' && $variables['view']->current_display == "hq_latest_news") {
    foreach ($variables['view']->result as $index => $result) {
      // Change view mode for each result.
      if ($index == 0) {
        $variables['rows'][0]['#rows'][$index]['#view_mode'] = 'featured_latest_news_card';
        unset($variables['rows'][0]['#rows'][$index]['#cache']['keys']);
      }
    }
  }
  // Added tags for specific views.
  $node_type = [
    "video",
    "event",
    "publication",
    "resource",
    "story",
    'podcast',
    'courses',
    'hq_article',
    'news_and_stories'
  ];

  $view_name = [
    'resource_listing',
    'hq_search',
    'latest_resources_by_type',
    'related_resources',
    'hq_articles',
    'articles',
    'hq_highlight_component'
  ];


  if (in_array($variables['view']->id(), $view_name)) {
    foreach ($variables['rows'] as $index => $rows_rst) {
      foreach ($rows_rst['#rows'] as $rst) {
        $node = $rst['#node'];
        if (isset($node)) {
          if (in_array($node->getType(), $node_type) && $node->setBy != 'paragraph') {
            if ($node->hasField('field_title') && !$node->get('field_title')->isEmpty()) {
              $node->card_title = $node->get('field_title')->value;
            }
            else {
              $node->card_title = $node->getTitle();
            }
            $field_name = '';
            if ($node->hasField('field_story_type')) {
              $field_name = 'field_story_type';
            }
            elseif ($node->hasField('field_resource_type')) {
              $field_name = 'field_resource_type';
            }
            elseif ($node->bundle() === 'event' && $node->hasField('field_event_type')) {
              $field_name = 'field_event_type';
            }

            if (strlen($field_name)) {
              $current_language = hq_get_current_language($variables);
              $story_type_tids = $node->get($field_name)->getValue();
              $first_story_type_tid = reset($story_type_tids)['target_id'];
              $story_type_term = Term::load($first_story_type_tid);
              if ($story_type_term && $story_type_term->hasTranslation($current_language)) {
                $translated_story_type_term = $story_type_term->getTranslation($current_language);
                $node->card_tag = $translated_story_type_term->getName();
              } else {
                // Fallback to the default language name.
                $node->card_tag = $story_type_term ? $story_type_term->getName() : '';
              }
            }
            elseif ($node->bundle() === 'video' || $node->bundle() === 'podcast') {
              $multimedia_title = \Drupal::service('unw_knowledge.tag_translation')->getMultimediaTagName($node);
              $node->card_tag = $multimedia_title;
            }
            elseif ($node->bundle() === 'websites') {
              $node->card_tag = t('Website');
            }
            elseif ($node->bundle() === 'courses') {
              if ($node->hasField('field_course_category') && !$node->get('field_course_category')->isEmpty()) {
                $course_type_value = $node->get('field_course_category')->target_id;
                $translated_course_type_term = \Drupal::service('unw_knowledge.tag_translation')->getTranslatedTag($course_type_value, $variables['langcode']);
                // Retrieve the label based on the value.
                $node->card_tag = $translated_course_type_term;
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function hq_preprocess_page(&$variables) {
  $current_domain = \Drupal::service('domain.negotiator')->getActiveId();
  $variables['is_kp_active'] = FALSE;
  if ($current_domain == 'knowledge_unwomen') {
    $variables['is_kp_active'] = TRUE;
  }

  $current_path = \Drupal::service('path.current')->getPath();
  $current_path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  if ($current_path_alias == '/jobs/unwomen') {
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
      $variables['body'] = $node->body->value;
      if ($node->hasField('field_media_image') && $node->get('field_media_image')->entity) {
        $hq_homepage_image = $node->get('field_media_image')->getValue()[0]['target_id'];
        $media_entity_load = Media::load($hq_homepage_image);
        $file_uri = $media_entity_load->field_media_image->entity->getFileUri();
        if(!empty($file_uri)) {
          $path = \Drupal::service('file_url_generator')->generateAbsoluteString($file_uri);
          $variables['image_url'] = Url::fromUri($path);
        }
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hq_theme_suggestions_region_alter(&$suggestions, $vars, $hook) {
  $region = $vars['elements']['#region'];
  // Define an array of our postscript regions.
  $region_list = ['header', 'navbar', 'top_bar'];
  // If we are in any of these regions, create a theme hook suggestion.
  if (in_array($region, $region_list)) {
    $current_domain = \Drupal::service('domain.negotiator')->getActiveId();
    $suggestions[] = $hook . '__' . $current_domain . '__' . $region;
  }
}

/**
 * Implements hook_theme_facets_summary_count().
 */
function hq_preprocess_facets_summary_count(array &$variables) {
  $request = \Drupal::request();
  $search_text = $request->query->has('keyword') ? trim($request->query->get('keyword')) : '';
  $variables['search_text'] = '';
  if (strlen($search_text)) {
    $variables['search_text'] = '"' . $search_text . '"';
  }
}

/**
 * Implements hook_theme_facets_summary_item_list().
 */
function hq_preprocess_facets_summary_item_list(array &$variables) {
  $request = \Drupal::request();
  $variables['show_summary'] = FALSE;
  $label_replacements = \Drupal::service('unw_knowledge.tag_translation')->getMappedContentTypeLables();
  $facet_summary_id = $variables['facet_summary_id'];

  if (!empty($request->query->get('keyword')) || !empty($request->query->all('f'))) {
    $variables['show_summary'] = TRUE;
  }

  if ($variables['items'][0]['value']['#theme'] === 'facets_summary_count') {
    $variables['count_summary'] = $variables['items'][0];
  }
  // Check if the facet summary id matches the filter type then update label.
  if (isset($facet_summary_id) && (in_array($facet_summary_id, ['kp_search_summary', 'thematic_area_resources_by_country_summary', 'thematic_area_resources_by_topic_summary', 'multimedia_for_co_ro_s_homepage_facets_summary']))) {
    foreach ($variables['items'] as &$item) {
      if (isset($item['value']['#title']['#value'])) {
        $facet_label = $item['value']['#title']['#value'];
        $facet_id = $item['value']['#title']['#facet']->id();
        if (in_array($facet_id, ['kp_search_type', 'thematic_area_resources_by_country_type', 'thematic_area_resources_by_topic_type', 'multimedia_for_co_ro_s_homepage_type']) && array_key_exists($facet_label, $label_replacements)) {
          // Replace the facet label with the new label.
          $item['value']['#title']['#value'] = $label_replacements[$facet_label];
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hq_preprocess_page_title(&$variables) {
  // Get the current route match.
  $route_match = \Drupal::routeMatch();
  $term_id = $route_match->getParameter('taxonomy_term');

  $kp_listing_routes_resources = [
    'view.hq_articles.resources_by_subject_country',
    'view.hq_articles.resources_by_subject_area',
  ];

  $kp_listing_routes_articles = [
    'view.hq_articles.articles_by_thematic_area',
    'view.hq_articles.articles_by_country',
  ];

  if (in_array($route_match->getRouteName(), $kp_listing_routes_resources)) {
    $variables['title'] = t('Resources');
  }
  if (in_array($route_match->getRouteName(), $kp_listing_routes_articles)) {
    $variables['title'] = t('Articles');
  }
}

/**
 * Implements hook__preprocess_form_element().
 */
function hq_preprocess_form_element(&$variables) {
  if (isset($variables['element']['#name']) && $variables['element']['#name'] == 'keyword') {
    $variables['attributes']['class'][] = 'form-item-search-api-fulltext';
  }
}

/**
 * Implements template_preprocess_paragraph().
 */
function hq_preprocess_paragraph__sdg_listing(&$variables) {
  $paragraph = $variables['paragraph'];
  $referenced_content = $paragraph->get('field_sdg')->referencedEntities();
  foreach ($referenced_content as $sdg_listing_details) {
    $sdg_list_id = $sdg_listing_details->id();
    // Get the current language
    $current_language = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();
    $sdg_number = $sdg_listing_details->get('field_sdg_number')->getString();
    if ($sdg_number >= 12 && $sdg_number <= 15) {
      $sdg_title = $sdg_listing_details->get('field_sdg_title')->getString();
      $variables['sdg_group_listing'][$sdg_number] = $sdg_title;
    }
    // Generates the full URL for internal/entity links by converting paths like 'internal:/node/add'
    // into a complete URL.
    if (!$sdg_listing_details->get('field_sdg_cta')->isEmpty()) {
      $link_item = $sdg_listing_details->get('field_sdg_cta')->getValue()[0];
      $uri = $link_item['uri'];

      // Determine the type of URI and generate the appropriate URL.
      if (strpos($uri, 'entity:') === 0) {
        // Entity URI: Extract the node ID and generate the URL.
        $node_id = str_replace('entity:node/', '', $uri);
        $static_site_url = Url::fromRoute('entity.node.canonical',
        ['node' => $node_id], ['absolute' => TRUE])->toString();
      }
      elseif (strpos($uri, needle: 'internal:') === 0) {
        // Internal URI: Handle language prefix and convert to URL.
        $path = str_replace('internal:/', '', $uri);
        $static_site_url = '/'.$current_language.'/'. $path;
      }
      else {
        // External URI: Use the URI directly.
        $static_site_url = $uri;
      }
      // Add the staticSiteURL and title to the variables.
      $variables['staticSiteURL'][$sdg_list_id] = $static_site_url;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for taxonomy term view modes.
 */
function hq_preprocess_taxonomy_term(&$variables) {
  $term = $variables['term'];
  // Get the current language code and set it in variables.
  $langcode = hq_get_current_language($variables);
  $variables['language'] = $langcode;
  // Check if the term belongs to the required vocabulary and the view mode is 'location_detail_model'.
  if ($term->bundle() === 'un_women_office_publishing' && $variables['view_mode'] === 'location_detail_modal') {
    // Load and format address if it exists.
    if ($term->hasField('field_address') && !$term->get('field_address')->isEmpty()) {
      $address = $term->get('field_address')->first()->getValue();
      $address_parts = array_filter([
        $address['organization'] ?? '',
        $address['address_line1'] ?? '',
        $address['address_line2'] ?? ''
      ]);

      // Get the country name.
      $country_name = !empty($address['country_code'])
        ? \Drupal::service('address.country_repository')->get($address['country_code'])->getName()
        : '';
      // Set the formatted address and country name in variables.
      $variables['formatted_address_line'] = implode(', ', $address_parts);
      $variables['address_detail'] = $address;
      $variables['country_label'] = $country_name;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for all templates.
 */
function hq_preprocess(&$variables, $hook) {
  static $is_rtl;
  static $langcode;

  // Set global "is_rtl" for RTL pages.
  if (!isset($is_rtl)) {
    $language = \Drupal::languageManager()->getCurrentLanguage();
    $is_rtl = $language->getDirection() === 'rtl' ? TRUE : FALSE;
  }

  if (!isset($langcode)) {
    $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  }

  $variables['langcode'] = $langcode;
  $variables['is_rtl'] = $is_rtl;
}

/**
 * Implements template_preprocess_paragraph().
 */
function hq_preprocess_paragraph__global_sdg_data_highlight(&$variables) {
  $current_language = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();
  // Generates the full URL for internal links by converting paths like 'internal:/node/add'
  // into a complete URL.
  if (!empty($variables['content']['field_link_limited'][0])) {
    $link_url = $variables['content']['field_link_limited'][0]['#url'];

    // Handle internal links by adding language prefix if necessary.
    if ($link_url->isExternal()) {
      $variables['link_url'] = $link_url->toString();
    }
    else {
      $url_string = $link_url->toString();
      $url_parts = explode('/', $url_string);
      // Prepend the current language if the first part doesn't match.
      $variables['link_url'] = (!isset($url_parts[1]) || $url_parts[1] != $current_language)
        ? '/' . $current_language . $url_string
        : $url_string;
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function hq_page_attachments_alter(array &$attachments) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof NodeInterface) {
    switch ($node->getType()) {
      case 'basic_page':
        // Process field_builder paragraphs for 'hero_banner'.
        $field_builder = $node->get('field_builder')->referencedEntities();
        foreach ($field_builder as $builder_paragraph) {
          if ($builder_paragraph->bundle() === 'hero_banner') {
            $image_url = \Drupal::service('unw_knowledge.tag_translation')->getImageUrl($builder_paragraph);
          }
        }
        break;
      default:
        // Process 'field_hero_banner' for other node types.
        if ($node->hasField('field_hero_banner') && !$node->get('field_hero_banner')->isEmpty()) {
          $hero_banner_field = $node->get('field_hero_banner')->referencedEntities();
          $image_url = \Drupal::service('unw_knowledge.tag_translation')->getImageUrl($hero_banner_field[0]);
        }
        break;
    }
  }
  // Preload Google fonts style in html head.
  $font_path = 'https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap';
  $googleapis_font = [
    'rel' => 'preconnect',
    'href' => '//fonts.googleapis.com/',
  ];
  $gstatic_font = [
    'rel' => 'preconnect',
    'href' => '//fonts.gstatic.com/',
    'crossorigin' => TRUE,
  ];
  $font = [
    'rel' => 'preload',
    'as' => 'style',
    'href' => $font_path,
    'crossorigin' => TRUE,
  ];
  $attachments['#attached']['html_head_link'][] = [$googleapis_font, FALSE];
  $attachments['#attached']['html_head_link'][] = [$gstatic_font, FALSE];
  $attachments['#attached']['html_head_link'][] = [$font, FALSE];

  // Preload Hero banner images
  if(isset($image_urls) && !empty($image_urls)) {
    foreach ($image_urls as $image_url) {
      $image = [
        'rel' => 'preload',
        'as' => 'image',
        'type' => 'image/webp',
        'href' => $image_url,
      ];
      $attachments['#attached']['html_head_link'][] = [$image, FALSE];
    }
  }

  $hero_backgroundImage = \Drupal::state()->get('hero_backgroundImage');
  if(isset($hero_backgroundImage) && !empty($hero_backgroundImage)) {
    $image = [
      'rel' => 'preload',
      'as' => 'image',
      'type' => 'image/webp',
      'href' => $hero_backgroundImage,
    ];
    $attachments['#attached']['html_head_link'][] = [$image, FALSE];
    \Drupal::state()->delete('hero_backgroundImage');
  }
}


/**
 * Implements hook_FORM_ID_alter().
 */
function hq_form_views_exposed_form_alter(&$form, FormStateInterface $form_state) {
  if ($form['#id'] == 'views-exposed-form-search-content-page-1') {
    $form['search_api_fulltext']['#title'] = t('Search');
    $form['search_api_fulltext']['#title_display'] = 'invisible';
  }
}

/**
 * Get current language.
 *
 * @return string
 */
function hq_get_current_language(&$variables): string {
  static $langcode;

  if (isset($langcode)) {
    $variables['langcode'] = $langcode;
  }
  elseif (!isset($variables['langcode'])) {
    $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $variables['langcode'] = $langcode;
  }

  return $variables['langcode'];
}
