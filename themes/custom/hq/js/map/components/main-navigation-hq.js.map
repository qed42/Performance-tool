{"version":3,"names":[],"mappings":"","sources":["components/main-navigation-hq.js"],"sourcesContent":["(function($, Drupal, once) {\n  Drupal.behaviors.hqMegaMenu = {\n    attach: function(context, settings) {\n      // Check if screen width is 1180px or greater (Desktop view)\n      if (window.innerWidth >= 1180) {\n\n        // Function to close any open dropdown menus\n        function closeDropdown() {\n          document.querySelectorAll('.hq-main-menu .dropdown-menu').forEach(menu => {\n            if (menu.classList.contains('show')) {\n              const parent = menu.parentElement;\n              menu.classList.remove('show');\n              parent.classList.remove('show');\n              parent.querySelector('.dropdown-toggle').setAttribute('aria-expanded', false);\n            }\n          });\n        }\n\n        // Apply behavior only once using Drupal's \"once\" function\n        once('hqMegaMenu', '.hq-main-menu .dropdown', context).forEach(dropdown => {\n          const dropdownToggle = dropdown.querySelector('.dropdown-toggle');\n          const dropdownMenuLevel = dropdown.querySelector('.menu-level-1');\n          const menuImages = dropdown.querySelectorAll('.menu-item__image');\n          let menuItems = dropdown.querySelectorAll('.menu-level-1 > .menu-item');\n          let hoverTimeout;\n\n          // Move images inside the dropdown menu if available\n          if (menuImages.length >= 1) {\n            menuImages.forEach(item => {\n              item.classList.remove('hidden');\n              dropdownMenuLevel.appendChild(item);\n            });\n          }\n\n          // Ensure the menu does not exceed 4 items, removing extra items if necessary\n          while (menuItems.length > 4) {\n            dropdownMenuLevel.removeChild(menuItems[menuItems.length - 1]);\n            menuItems = dropdown.querySelectorAll('.menu-level-1 > .menu-item');\n          }\n\n          // Show dropdown menu when hovered\n          dropdown.addEventListener('mouseenter', function(event) {\n            hoverTimeout = setTimeout(() => { // Prevent flickering with a timeout\n              closeDropdown();\n              const currentMenu = event.target;\n              currentMenu.classList.add('show');\n              currentMenu.querySelector('.dropdown-toggle').setAttribute('aria-expanded', true);\n              currentMenu.querySelector('.dropdown-menu').classList.add('show');\n            }, 100);\n          });\n\n          // Hide dropdown menu when mouse leaves\n          dropdown.addEventListener('mouseleave', function(event) {\n            clearInterval(hoverTimeout);\n            const currentMenu = event.target;\n            currentMenu.classList.remove('show');\n            currentMenu.querySelector('.dropdown-menu').classList.remove('show');\n            currentMenu.querySelector('.dropdown-toggle').setAttribute('aria-expanded', false);\n          });\n\n          // Open dropdown menu when focused (keyboard navigation)\n          dropdownToggle.addEventListener('focus', function(event) {\n            closeDropdown();\n            const currentMenuLink = event.target;\n            currentMenuLink.setAttribute('aria-expanded', true);\n            currentMenuLink.parentElement.classList.add('show');\n            currentMenuLink.parentElement.querySelector('.dropdown-menu').classList.add('show');\n          });\n\n          // Redirect to the clicked link when clicking the dropdown toggle\n          dropdownToggle.addEventListener('click', function(event) {\n            window.location.href = event.currentTarget.getAttribute('href');\n          });\n\n          // Close dropdown when focus leaves the main menu\n          document.querySelector('.hq-main-menu').addEventListener('focusout', function() {\n            setTimeout(() => { // Prevent flickering with a timeout\n              if (!this.matches(':hover, :focus-within')) {\n                closeDropdown();\n              }\n            }, 100);\n          });\n\n          // Close dropdown when clicking outside of the menu\n          document.addEventListener('click', function(event) {\n            const megaMenu = document.querySelector('.hq-main-menu');\n            if (!megaMenu.contains(event.target)) {\n              closeDropdown();\n            }\n          });\n\n        }); // End forEach\n\n        // Close dropdown menu when focusing on a non-dropdown link\n        once('hqMegaMenu', '.hq-main-menu > .nav-item > .nav-link:not(.dropdown-toggle)', context).forEach(link => {\n          link.addEventListener('focus', function() {\n            closeDropdown();\n          });\n        }); // End forEach\n\n      } else { // Mobile view behavior\n        once('hqMegaMenu', '.hq-main-menu .dropdown', context).forEach(dropdown => {\n          const dropdownToggle = dropdown.querySelector('.dropdown-toggle');\n\n          // Handle click event on dropdown toggle\n          dropdownToggle.addEventListener('click', function(event) {\n            if (event.target.tagName === 'SPAN') {\n              window.location.href = event.target;\n            }\n          });\n        });\n      } // End if condition\n    }\n  };\n})(jQuery, Drupal, once);\n"],"file":"../../components/main-navigation-hq.js"}