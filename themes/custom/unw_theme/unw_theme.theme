<?php

/**
 * @file
 * SUBTHEME theme file.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\block\Entity\Block;
use Drupal\views\Views;
use Drupal\Core\Render\Markup;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Template\Attribute;
use Drupal\Component\Utility\Html;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Component\Utility\Xss;

/**
 * Implements hook_FORM_ID_alter().
 */
function unw_theme_form_search_block_form_alter(&$form, FormStateInterface $form_state) {
  $form['keys']['#attributes']['placeholder'] = t('Search...');
}

/**
 * Implements template_preprocess_paragraph__paragraph_id.
 */
function unw_theme_preprocess_paragraph__featured_video(&$variables) {
  $paragraph = $variables['paragraph'];
  $video_value = $paragraph->get('field_video')->getValue();
  if (!empty($video_value)) {
    $variables['video_url'] = $video_value[0]['value'];
  }
}

/**
 * Implements template_preprocess_paragraph__paragraph_id.
 */
function unw_theme_preprocess_paragraph__in_this_section(&$variables) {
  $paragraph = $variables['paragraph'];
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $current_d_path = \Drupal::service('path.current')->getPath();
  $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_d_path);
  $path_alias_array = explode('/', $path_alias);
  array_pop($path_alias_array);
  $path_up_level = '/' . $language . implode('/', $path_alias_array);
  $variables['path_up_level'] = $path_up_level;
}

/**
 * Implements template_preprocess_paragraph__paragraph_id.
 */
function unw_theme_preprocess_paragraph__listing_reference(&$variables) {
  $paragraph = $variables['paragraph'];

  $listingValue = $paragraph->get('field_listing_type')->getString();
  if (empty($listingValue)) {
    $listingValue = 'latest_news';
  }
  $variables['listing_value'] = $listingValue;

  $mapping_listing = [
    'latest_news' => 'latest_news',
    'latest_publications' => 'latest_publications',
    'latest_publications_thumbnail' => 'latest_publications',
    'events' => 'upcoming_events',
    'undp_vacancies_closing_soon' => 'undp_vacancies',
    'undp_vacancies_closing_soon_2' => 'undp_vacancies',
  ];

  if (array_key_exists($listingValue, $mapping_listing)) {
    $view = Views::getView($mapping_listing[$listingValue]);
    if ($paragraph->get('field_listing_type')->getString() == 'latest_publications_thumbnail' ||
      $paragraph->get('field_listing_type')->getString() == 'undp_vacancies_closing_soon') {
      $view->setDisplay('block_2');
      $view_render = $view->preview('block_2');
    }
    elseif ($paragraph->get('field_listing_type')->getString() == 'undp_vacancies_closing_soon_2') {
      $view->setDisplay('block_3');
      $view_render = $view->preview('block_3');
    }
    else {
      $view->setDisplay('block_1');
      $view_render = $view->preview('block_1');
    }
    $variables['listing_view'] = $view_render;
  }

  // Set title.
  if ($paragraph->get('field_listing_type')->getString() === 'latest_news' ||
      $paragraph->get('field_listing_type')->getString() == 'undp_vacancies_closing_soon' ||
      $paragraph->get('field_listing_type')->getString() == 'undp_vacancies_closing_soon_2') {
    $variables['component_title'] = $paragraph->get('field_component_title')->getString();
  }

}

/**
 * Implements template_preprocess_field().
 */
function unw_theme_preprocess_field(&$variables, $hook) {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $variables['language'] = $language;
  $element = $variables['element'];
  if ($variables['entity_type'] == 'paragraph') {
    if ($variables['field_name'] == "field_related_story") {
      $paragraph = $variables['element']['#object'];
      $related_stories = $paragraph->get('field_related_story')->getValue();
      foreach ($related_stories as $key => $story) {
        $story_node = \Drupal::entityTypeManager()->getStorage('node')->load($story['target_id']);
        $created = $story_node->changed->getValue();
        $variables['items'][$key] += [
          'story_created' => $created[0]['value'],
        ];
      }
    }
  }
  // Process landing page option.
  if ($variables['field_name'] == 'field_landing_page') {
    if ($variables['entity_type'] == 'node') {
      $variables['#cache']['max-age'] = 0;
      $variables['content']['#cache']['max-age'] = 0;
      $node = $variables['element']['#object'];
      $landing_value = $node->field_landing_page->getValue();
      $view_render = '';
      if (!empty($landing_value) && $landing_value[0]['value'] == 1) {
        // Load menu link based on node id.
        $service_help = \Drupal::service('unw_helper.help');
        $menu_item_id = $service_help->menuLinkIdByNodeId($node->id());
        if (!empty($menu_item_id)) {
          $view = Views::getView('menu_item_landing');
          $view->setDisplay('block_1');
          $view->setArguments([$menu_item_id]);
          $view->preExecute();
          $view->execute();
          $view_render = $view->preview('block_1');
        }
      }
      $variables['view'] = $view_render;
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function unw_theme_preprocess_node(&$variables) {
  // Getting the node creation time stamp from the node object.
  $date = $variables['node']->getCreatedTime();
  // Use custom date time format.
  $node = $variables['node'];

  // Generate relate stories block if nothing is completed.
  if ($node->getType() == 'story') {

    $load_related = TRUE;

    $builder_component = $node->field_builder->getValue();
    if (!empty($builder_component)) {
      foreach ($builder_component as $key => $value) {
        $para = \Drupal::entityTypeManager()->getStorage('paragraph')->load($value['target_id']);
        if ($para->getType() == 'related_stories') {
          $load_related = FALSE;
        }
      }
    }
    if ($load_related) {
      $nid = $node->id();
      $view_related_stories = Views::getView('related_stories');
      $view_related_stories->setDisplay('block_1');
      $args = [$nid];
      $view_render = $view_related_stories->preview('block_1', $args);
      $variables['view_related_stories'] = $view_render;
    }
  }

  if ($node->hasField('field_date')) {
    $field_date = $node->get('field_date')->getValue();
    $variables['content']['date'][0]['#start_date'] = date('d F Y', $field_date[0]['value']);
    $variables['content']['date'][0]['#end_date'] = date('d F Y', $field_date[0]['end_value']);
    $variables['content']['date'][0]['#timezone'] = $field_date[0]['timezone'];
    $variables['content']['date'][0]['#start_time'] = date('H:i', $field_date[0]['value']);
    $variables['content']['date'][0]['#end_time'] = date('H:i', $field_date[0]['end_value']);
    $variables['content']['date'][0]['#timezone_p'] = date('P', $field_date[0]['value']);
  }

  if ($node->getType() == 'article') {
    if (isset($variables['content']['field_builder'])) {
      foreach ($variables['content']['field_builder'] as $key => $paragraph) {
        // Process slider.
        if (is_numeric($key)) {
          if ($paragraph['#paragraph']->hasField('field_homepage_look_and_feel')) {
            $hompage_lf = $paragraph['#paragraph']->get('field_homepage_look_and_feel')->getValue();
            if (!empty($hompage_lf) && $hompage_lf[0]['value'] == 1) {
              $variables['content']['slider_top'] = $variables['content']['field_builder'][$key];
              unset($variables['content']['field_builder'][$key]);
            }
            else {
              $variables['content']['rest_of_builder'][] = $variables['content']['field_builder'][$key];
            }
          }
          else {
            $variables['content']['rest_of_builder'][] = $variables['content']['field_builder'][$key];
          }
        }
      }
    }
  }
  // Remove double title.
  $status_code = Drupal::requestStack()->getCurrentRequest()->attributes->get('exception');
  if (!is_null($status_code)) {
    $status_code = $status_code->getStatusCode();
    if (isset($status_code) && (($status_code == 404) || ($status_code == 403))) {
      $variables['hide_title'] = TRUE;
    }
  }

  if ($node->getType() == 'event') {
    $contact_email = $node->get('field_contact_email')->getValue();
    if (!empty($contact_email)) {
      $process_email = str_replace('@', '[at]', $contact_email[0]['value']);
      $variables['content']['contact_email'] = [$process_email];
    }
  }

  if ($node->getType() == 'call_for_proposals') {
    $contact_email = $node->get('field_contact_email')->getValue();
    if (!empty($contact_email)) {
      $process_email = str_replace('@', '[at]', $contact_email[0]['value']);
      $variables['content']['contact_email'] = [$process_email];
    }
  }

  // Process publications terms.
  if ($node->getType() == 'publication') {
    if (isset($variables['content']['field_subject_area'])) {
      $subject_area_terms = [];
      foreach ($variables['content']['field_subject_area'] as $key => $item) {
        if (is_numeric($key)) {
          $subject_area_terms[] = [
            'name' => $item['#title'],
            'id' => $item['#options']['entity']->get('tid')->getValue()['0']['value']
          ];
        }
      }
      $variables['content']['subject_area_terms'] = $subject_area_terms;
    }

    if (isset($variables['content']['field_resource_type'])) {
      $resource_type_terms = [];
      foreach ($variables['content']['field_resource_type'] as $key => $item) {
        if (is_numeric($key)) {
          $resource_type_terms[] = [
            'name' => $item['#title'],
            'id' => $item['#options']['entity']->get('tid')->getValue()['0']['value']
          ];
        }
      }
      $variables['content']['resource_type_terms'] = $resource_type_terms;
    }

    if (isset($variables['content']['field_publication_series'])) {
      $publication_series_terms = [];
      foreach ($variables['content']['field_publication_series'] as $key => $item) {
        if (is_numeric($key)) {
          $publication_series_terms[] = [
            'name' => $item['#title'],
            'id' => $item['#options']['entity']->get('tid')->getValue()['0']['value']
          ];
        }
      }
      $variables['content']['publication_series_terms'] = $publication_series_terms;
    }

    if (isset($variables['content']['field_publishing_office'])) {
      $publishing_office_terms = [];
      foreach ($variables['content']['field_publishing_office'] as $key => $item) {
        if (is_numeric($key)) {
          $publishing_office_terms[] = [
            'name' => $item['#title'],
            'id' => $item['#options']['entity']->get('tid')->getValue()['0']['value']
          ];
        }
      }
      $variables['content']['publishing_office_terms'] = $publishing_office_terms;
    }

    if (isset($variables['content']['field_governing_body'])) {
      $governing_body_terms = [];
      foreach ($variables['content']['field_governing_body'] as $key => $item) {
        if (is_numeric($key)) {
          $governing_body_terms[] = [
            'name' => $item['#title'],
            'id' => $item['#options']['entity']->get('tid')->getValue()['0']['value']
          ];
        }
      }
      $variables['content']['governing_body_terms'] = $governing_body_terms;
    }

    if (isset($variables['content']['field_publishing_entity'])) {
      $publishing_entity_terms = [];
      foreach ($variables['content']['field_publishing_entity'] as $key => $item) {
        if (is_numeric($key)) {
          $publishing_entity_terms[] = [
            'name' => $item['#title'],
            'id' => $item['#options']['entity']->get('tid')->getValue()['0']['value']
          ];
        }
      }
      $variables['content']['publishing_entity_terms'] = $publishing_entity_terms;
    }

    if (isset($variables['content']['field_country'])) {
      $country_terms = [];
      foreach ($variables['content']['field_country'] as $key => $item) {
        if (is_numeric($key)) {
          $country_terms[] = [
            'name' => $item['#title'],
            'id' => $item['#options']['entity']->get('tid')->getValue()['0']['value']
          ];
        }
      }
      $variables['content']['country_terms'] = $country_terms;
    }

    if (isset($variables['content']['field_region'])) {
      $region_terms = [];
      foreach ($variables['content']['field_region'] as $key => $item) {
        if (is_numeric($key)) {
          $region_terms[] = [
            'name' => $item['#title'],
            'id' => $item['#options']['entity']->get('tid')->getValue()['0']['value']
          ];
        }
      }
      $variables['content']['region_terms'] = $region_terms;
    }
  }

  if ($node->getType() == 'video') {
    unset($variables['content']['left']['field_watch_more']);
    unset($variables['content']['left']['field_story_publication_date']);
  }
}

/**
 * Implements hook_preprocess_ds().
 */
function unw_theme_preprocess_ds_entity_view(&$variables) {
  $variables['node'] = $variables['content']['#node'];
  $variables['view_mode'] = $variables['content']['#view_mode'];
  unw_theme_preprocess_node($variables);
}

/**
 * Implements hook_preprocess_html().
 */
function unw_theme_preprocess_html(&$variables) {
  $statusCode = Drupal::request()->query->get('_exception_statuscode');
  if (isset($statusCode) and (($statusCode == 404) or ($statusCode == 403))) {
    $variables['attributes']['class'][] = 'page-' . $statusCode;
  }

  // Query the node and add a class to the body.
  $node = \Drupal::request()->attributes->get('node');
  if (is_numeric($node)) {
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($node);
  }
  if (!empty($node) && $node->getType() == 'page') {
    $landing_page = $node->field_landing_page->getValue();
    if (!empty($landing_page) && $landing_page[0]['value'] == 1) {
      $variables['attributes']['class'][] = 'menu-item-landing';
    }
  }

  // HTML Direction.
  $html_dir = $variables['html_attributes']->storage()['dir']->value();
  if ($html_dir == 'rtl') {
    $variables['#attached']['library'][] = 'unw_theme/unw-rtl';
  }
}

/**
 * Implements hook_preprocess_links__language_block().
 */
function unw_theme_preprocess_links__language_block(&$variables) {
  $languages = $variables['links'];
  if (count($languages) == 1) {
    unset($variables['links']);
  }
}

/**
 * Implements hook_preprocess_page().
 */
function unw_theme_preprocess_page(&$variables) {
  // Prepare variable for Footer logo block.
  $block_footer_logo = Block::load('blockfooterlogo');
  if (isset($block_footer_logo)) {
    $variables['block_footer_logo'] = \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($block_footer_logo);
  }

  $block_copyright = Block::load('copyright');
  if (isset($block_copyright)) {
    $variables['block_copyright'] = \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($block_copyright);
  }

  $variables['#attached']['drupalSettings']['responsive_menu']['custom'] = [
    'options' => [
      'navbar' => [
        'title' => 'UN Women',
        'close' => TRUE,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_views_exposed_form().
 */
function unw_theme_preprocess_views_exposed_form(&$variables) {
  $form = $variables['form'];
  // Add an isset() check to avoid the "Undefined index: #value" error.
  if (isset($form['search_api_fulltext']['#value'])) {
    $variables['searched_word'] = $form['search_api_fulltext']['#value'];
  }

  // Search results page.
  if ($form['#id'] == 'views-exposed-form-search-content-page-1') {
    $search_content_results = unw_theme_get_view_results('search_content', 'page_1');
    $variables['results'] = $search_content_results[0];
  }
  // Search on UN System Coordination Library page.
  if ($form['#id'] == 'views-exposed-form-search-content-page-2') {
    $search_content_results = unw_theme_get_view_results('search_content', 'page_2');
    $variables['results'] = $search_content_results[0];
  }
  // Stories page.
  if ($form['#id'] == 'views-exposed-form-stories-page-1') {
    $search_content_results = unw_theme_get_view_results('stories', 'page_1');
    $variables['results'] = $search_content_results[0];
  }
  // Publications page.
  if ($form['#id'] == 'views-exposed-form-publications-page-1') {
    $search_content_results = unw_theme_get_view_results('publications', 'page_1');
    $variables['results'] = $search_content_results[0];
  }

  // Learning Hub page.
  if ($form['#id'] == 'views-exposed-form-publications-page-2') {
    $search_content_results = unw_theme_get_view_results('publications', 'page_2');
    $variables['results'] = $search_content_results[0];
  }

  // Multimedia search page.
  if ($form['#id'] == 'views-exposed-form-multimedia-page-1') {
    $search_content_results = unw_theme_get_view_results('multimedia', 'page_1');
    $variables['results'] = $search_content_results[0];
  }
  // Upcoming events page.
  if ($form['#id'] == 'views-exposed-form-events-page-1') {
    $search_content_results = unw_theme_get_view_results('events', 'page_1');
    $variables['results'] = $search_content_results[0];
  }
  // Past events page.
  if ($form['#id'] == 'views-exposed-form-events-page-2') {
    $search_content_results = unw_theme_get_view_results('events', 'page_2');
    $variables['results'] = $search_content_results[0];
  }
  // Resources page.
  if ($form['#id'] == 'views-exposed-form-resources-page-1') {
    $search_content_results = unw_theme_get_view_results('resources', 'page_1');
    $variables['results'] = $search_content_results[0];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function unw_theme_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  $node = \Drupal::request()->attributes->get('node');
  if (is_numeric($node)) {
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($node);
  }
  if (!empty($node) && $node->getType() == 'page') {
    $landing_page = $node->field_landing_page->getValue();
    if (!empty($landing_page) && $landing_page[0]['value'] == 1) {
      $suggestions[] = 'node__landing_menu_items';
    }
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function unw_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if (is_numeric($node)) {
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($node);
    }
    $suggestions[] = 'page__' . $node->bundle();
  }
}

/**
 * Helper function to return number of view results.
 */
function unw_theme_get_view_results($view_name, $display_id) {

  $view = Views::getView($view_name);
  $view->get_total_rows = TRUE;
  $view->execute($display_id);
  $rows = $view->total_rows;
  $exposed_data = $view->exposed_data;
  $searched_word = '';
  if (!empty($exposed_data['search_api_fulltext'])) {
    $searched_word = $exposed_data['search_api_fulltext'];
  }
  return [$rows, $searched_word];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function unw_theme_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function unw_theme_preprocess_block(&$variables) {

  // Adding custom attribute class for block.
  if ($variables['elements']['#base_plugin_id'] == 'block_content') {
    $block_type = strtr($variables['content']['#block_content']->bundle(), '_', '-');
    $variables['attributes']['class'][] = 'block--type-' . $block_type;
  }

  if($variables['base_plugin_id'] == 'views_exposed_filter_block') {
    $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $variables['language'] = $language;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for domains menus.
 */
function unw_theme_theme_suggestions_menu_alter(&$suggestions, array $variables) {
  if (str_contains($variables['theme_hook_original'], 'menu__dm')) {
    $suggestions[] = 'menu__main';
  }
}

/**
 * Implements theme_preprocess_breadcrumb().
 */
function unw_theme_preprocess_breadcrumb(&$variables) {
  $database = \Drupal::database();
  $lang = \Drupal::languageManager()->getCurrentLanguage(\Drupal\Core\Language\LanguageInterface::TYPE_CONTENT)->getId();
  $current_domain = \Drupal::service('domain.negotiator')->getActiveId();

//   if ($node = \Drupal::routeMatch()->getParameter('node')) {
//     $node = \Drupal::request()->attributes->get('node');
//     if (is_numeric($node)) {
//       $node = \Drupal::entityTypeManager()->getStorage('node')->load($node);
//     }

//     // Get paths of latest news block.
//     $block = Block::load('views_block__latest_news_block_2');
//     $block_paths = $block->getVisibility()['request_path']['pages'];
//     $blocks_id = preg_split('/\s+/', $block_paths);
//     foreach ($blocks_id as $key => $block_id) {
//       // Get alias.
//       $query = $database->select('domain_path', 'dp')
//         ->condition('dp.alias', $block_id)
//         ->condition('dp.domain_id', $current_domain)
//         ->fields('dp', ['source']);
//       $result = $query->execute()->fetchField();
//       if (!empty($result) && $result !== FALSE) {
//         $result = str_replace('/node/', '', $result);
//         $node_load = \Drupal::entityTypeManager()->getStorage('node')->load($result);
//         // Get translated title if it has.
//         if ($node_load->hasTranslation($lang)) {
//           $node_load = $node_load->getTranslation($lang);
//           $node_title = $node_load->field_title->value;
//         }
//         else {
//           $node_title = $node_load->field_title->getString();
//         }
//         // Get path alias of node.
//         $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $result, $lang);

//         // Fix breadcrumb issue on Story nodes.
//         if ($node->getType() == 'story') {
//           // Unset all links.
//           for ($i = 0; $i < 5; $i++) {
//             unset($variables['breadcrumb'][$i]);
//             unset($variables['links'][$i]);
//           }
          
//           // Create new instances of breadcrumb tree.
//           $breadcrumb = new Breadcrumb();
//           $breadcrumb->addLink(Link::createFromRoute(t('Home'), '/' . $lang));
//           $breadcrumb->addLink(Link::createFromRoute($node_title, '/' . $lang . $alias));
//           $breadcrumb->addLink(Link::createFromRoute(t('Stories'), '/' . $lang . '/news-and-events/stories'));
//           $variables['links'] = $breadcrumb;

//           // Rewrite breadcrumb tree.
//           $variables['breadcrumb']['0']['text'] = t('Home');
//           $variables['breadcrumb']['0']['url'] = '/' . $lang;
//           $variables['breadcrumb']['1']['text'] = $node_title;
//           $variables['breadcrumb']['1']['url'] = '/' . $lang . $alias;
//           $variables['breadcrumb']['2']['text'] = t('Stories');
//           $variables['breadcrumb']['2']['url'] = '/' . $lang . '/news-and-events/stories';
//         }
//         elseif ($node->getType() == 'event') {
//           // Unset all links.
//           for ($i = 0; $i < 5; $i++) {
//             unset($variables['breadcrumb'][$i]);
//             unset($variables['links'][$i]);
//           }
          
//           // Create new instances of breadcrumb tree.
//           $breadcrumb = new Breadcrumb();
//           $breadcrumb->addLink(Link::createFromRoute(t('Home'), '/' . $lang));
//           $breadcrumb->addLink(Link::createFromRoute($node_title, '/' . $lang . $alias));
//           $breadcrumb->addLink(Link::createFromRoute(t('Events'), '/' . $lang . '/news-and-events/events'));
//           $variables['links'] = $breadcrumb;

//           // Rewrite breadcrumb tree.
//           $variables['breadcrumb']['0']['text'] = t('Home');
//           $variables['breadcrumb']['0']['url'] = '/' . $lang;
//           $variables['breadcrumb']['1']['text'] = $node_title;
//           $variables['breadcrumb']['1']['url'] = '/' . $lang . $alias;
//           $variables['breadcrumb']['2']['text'] = t('Events');
//           $variables['breadcrumb']['2']['url'] = '/' . $lang . '/news-and-events/events';
//         }
//       }
//     }
//     // Breadcrumb corect path if is for wrong domain.
//     if (!empty($variables['links'])) {
//       foreach ($variables['links'] as $key_link => $link) {
//         $url = $link->getUrl();
//         $route = $url->getRouteParameters();
//         if (!empty($route) && isset($route['node'])) { 
//           $node = \Drupal::entityTypeManager()->getStorage('node')->load($route['node']);
//           $domains = $node->get('field_domain_access')->getValue();
//           $node_correct_domain = FALSE;
//           $not_hq = FALSE;
//           foreach ($domains as $domain) {
//             if ($domain['target_id'] == $current_domain) {
//               $node_correct_domain = TRUE;
//             }
//             if ($domain['target_id'] != 'hq_unwomen') {
//               $not_hq = TRUE;
//             }
//           }
//           if (!$node_correct_domain) {
//             $path_alias = '';
//             if ($not_hq) {
//               $properties = [
//                 'source' => '/node/' . $route['node'],
//                 'language' => $lang,
//               ];
//               $domain_path_storage = \Drupal::entityTypeManager()->getStorage('domain_path');
//               $domain_paths = $domain_path_storage->loadByProperties($properties);
//               if (!empty($domain_paths)) {
//                 $alias_value = current($domain_paths)->get('alias')->getValue();
//                 $path_alias = $alias_value[0]['value'];
//               }
//             }
//             else {
//               $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $route['node']);        
//             }
//             if (!empty($path_alias)) {
//               $variables['breadcrumb'][$key_link]['url'] = '/' .$lang . $path_alias;
//             }
//           }
//         }
//       }
//     }
//   }

  // Fix for breadcrumbs on solr views.
  $view_id = \Drupal::routeMatch()->getParameter('view_id');
  if (($view_id == 'stories') || ($view_id == 'events') || ($view_id == 'publications') || ($view_id == 'multimedia') || ($view_id == 'videos')) {

    // Get menu id from menu block.
    $blocks = Block::loadMultiple();
    foreach ($blocks as $key => $block) {
      if (isset($block->getVisibility()['domain']['domains'][$current_domain])) {
        if ($block->getVisibility()['domain']['domains'][$current_domain] == $current_domain && $block->getRegion() == 'nav_main') {
          $menu_system = $block->getPluginId();
          $menu_id = explode(':', $menu_system);
        }
      }
    }

    // Get menu tree and node id of parent item.
    $menu_tree = Drupal::menuTree();
    $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_id[1]);
    $parameters->setTopLevelOnly();
    $main_menu_top_level = $menu_tree->load($menu_id[1], $parameters);
    $node_id_active_trail = '';

    foreach ($main_menu_top_level as $key => $menu_link_details) {
      if ($menu_link_details->inActiveTrail) {
        $plugin_defintion = $menu_link_details->link->getPluginDefinition();
        if (isset($plugin_defintion['route_parameters']['node'])) {
          $node_id_active_trail = $plugin_defintion['route_parameters']['node'];
        }
      }
    }

    if (!empty($node_id_active_trail)) {
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($node_id_active_trail);

      // Get translated title if it has.
      if ($node->hasTranslation($lang)) {
        $node = $node->getTranslation($lang);
        $node_title = $node->field_title->value;
      }
      else {
        $node_title = $node->field_title->getString();
      }

      // Get path alias of node.
      $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $node_id_active_trail, $lang);

      $breadcrumb = new Breadcrumb();
      $breadcrumb->addLink(Link::createFromRoute(t('Home'), '/' . $lang));
      $breadcrumb->addLink(Link::createFromRoute($node_title, '/' . $lang . $alias));
      $variables['links'] = $breadcrumb;

      // Rewrite breadcrumb tree.
      $variables['breadcrumb']['0']['text'] = t('Home');
      $variables['breadcrumb']['0']['url'] = '/' . $lang;
      $variables['breadcrumb']['1']['text'] = $node_title;
      $variables['breadcrumb']['1']['url'] = '/' . $lang . $alias;
    }
  }

  // Correct the number of crumbs.
  if ($view_id == 'videos') {
    if (count($variables['breadcrumb']) > 2) {
      unset($variables['breadcrumb']['2']);
    }
  }

  // Fix breadcrumb for past events.
  if (($view_id == 'events') && (\Drupal::routeMatch()->getParameter('display_id') == 'page_2')) {
    unset($variables['breadcrumb']['2']);
  }
}

/**
 * Implements theme_preprocess_menu().
 */
function unw_theme_preprocess_menu(&$variables) {
  foreach ($variables['items'] as &$link) {
    $link['title'] = Markup::create($link['title']);
  }
  if (isset($variables['menu_name']) && $variables['menu_name'] == 'secondary-navigation') {
    $variables['#cache']['max-age'] = 0;
    $variables['content']['#cache']['max-age'] = 0;
    foreach ($variables['items'] as $key => &$link) {
      if (empty($link['below'])) {
        $link['is_expanded'] = FALSE;
      }
      else {
        foreach ($variables['items'][$key]['below'] as &$link_below) {
          if (empty($link_below['below'])) {
            $link_below['is_expanded'] = FALSE;
          }
        }
      }
    }
  }
}

/**
 * Prepares variables for RSS / UW RSS feed templates.
 *
 * Default template: views-view-rss.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - view: A ViewExecutable object.
 *   - rows: The raw row data.
 */
function unw_theme_preprocess_views_view_rss(array $variables) {
  $view = $variables['view'];
  $items = $variables['rows'];
  $style = $view->style_plugin;

  $config = \Drupal::config('system.site');
  $style_id = $style->definition['id'];
  if ($style_id === 'rss') {
    // The RSS 2.0 "spec" doesn't indicate HTML can be used in the description.
    // We strip all HTML tags, but need to prevent double encoding from properly
    // escaped source data (such as &amp becoming &amp;amp;).
    $variables['description'] = Html::decodeEntities(strip_tags($style->getDescription()));

    if ($view->display_handler->getOption('sitename_title')) {
      $title = $config->get('name');
      if ($slogan = $config->get('slogan')) {
        $title .= ' - ' . $slogan;
      }
    }
    else {
      $title = $view->getTitle();
    }
    $variables['title'] = $title;
    $variables['link'] = Url::fromRoute('<front>')->setAbsolute()->toString();
    $variables['langcode'] = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $variables['namespaces'] = new Attribute($style->namespaces);
    $variables['items'] = $items;
    $variables['channel_elements'] = $style->channel_elements;

    // During live preview we don't want to output the header since the contents
    // of the feed are being displayed inside a normal HTML page.
    if (empty($variables['view']->live_preview)) {
      $variables['view']->getResponse()->headers->set('Content-Type', 'application/rss+xml; charset=utf-8');
    }
  }
  else {
    $active_domain = \Drupal::service('domain.negotiator')->getActiveId();
    $variables['description'] = $style->getDefaultDescription($active_domain);
    $title = $style->getDefaultTitle($active_domain);
    $link = $style->getDefaultLink($active_domain);
    $variables['title'] = $title;
    $variables['link'] = $link;
    $variables['langcode'] = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $variables['namespaces'] = new Attribute($style->namespaces);
    $variables['items'] = $items;
    $variables['channel_elements'] = $style->channel_elements;
    $variables['atom_link'] = $style->getAtomLink($active_domain);
    $variables['rss_image'] = $style->getRssImage($active_domain);
    $variables['copyright'] = $style->getDefaultCopyright($active_domain);

    // During live preview we don't want to output the header since the contents
    // of the feed are being displayed inside a normal HTML page.
    if (empty($variables['view']->live_preview)) {
      $variables['view']->getResponse()->headers->set('Content-Type', 'application/rss+xml; charset=utf-8');
    }
  }
}

/**
 * Implements page_attachments_alter().
 */
function unw_theme_page_attachments_alter(array &$attachments) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name === 'entity.node.canonical') {
    $node = \Drupal::routeMatch()->getParameter('node');

    if ($node instanceof \Drupal\node\NodeInterface && $node->bundle() === 'full_html') {
      if (!empty($attachments['#attached']['library'])) {
        foreach ($attachments['#attached']['library'] as $key => $library) {
          if ($library === 'bootstrap4/global-styling') {
            unset($attachments['#attached']['library'][$key]);
          }
          if ($library === 'unw_theme/global-styling') {
            unset($attachments['#attached']['library'][$key]);
          }
        }
      }
    }
  }
}

/**
 * Implements template_preprocess_media.
 */
function unw_theme_preprocess_media(array &$variables) {
  $mediaType = $variables['media']->bundle();
  $media_caption = \Drupal::service('entity.repository')->getTranslationFromContext($variables['media'])->name->value;
  $variables['media_caption'] = $media_caption;
  if($mediaType == 'remote_video'){
    unset($variables['content']['field_caption_image']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function unw_theme_theme_suggestions_media_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['#media']->_referringItem)) {
    $paragraph = $variables['elements']['#media']->_referringItem->getParent()->getParent()->getEntity()->bundle();
    $suggestions[] = 'media__paragraph_' . $paragraph;
  }
}

/**
 * Implements hook_preprocess_filter_caption().
 */
function unw_theme_preprocess_filter_caption(array &$variables) {
  if (isset($variables['caption'])) {
    $variables['caption'] = '';
  }
}

/**
 * Implements hook_preprocess_HOOK() for image elements.
 */
function unw_theme_preprocess_image(&$variables) {
  // Get the file path from the image URI.
  $file_path = \Drupal::service('file_system')->realpath($variables['uri']);

  // Check if the file path exists.
  if (file_exists($file_path)) {
    // Get the last modified timestamp of the image file.
    $timestamp = filemtime($file_path);
    // Create a file URL with the timestamp as a query parameter.
    $file_url = \Drupal::service('file_url_generator')->generateString($variables['uri']);
    // Transform the file URL into a relative path.
    $relative_path = \Drupal::service('file_url_generator')->transformRelative($file_url);
    // Append the timestamp as a query parameter to the image URI.
    $variables['attributes']['src'] =  $relative_path . '?t=' . $timestamp;
  }
}
